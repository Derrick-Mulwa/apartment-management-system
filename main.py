# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(1022, 494)
        Form.setMinimumSize(QtCore.QSize(1022, 494))
        Form.setMaximumSize(QtCore.QSize(1022, 494))
        self.stackedWidget = QtWidgets.QStackedWidget(Form)
        self.stackedWidget.setGeometry(QtCore.QRect(-40, 0, 1061, 521))
        self.stackedWidget.setStyleSheet("background-color:rgb(25, 25, 25)")
        self.stackedWidget.setObjectName("stackedWidget")
        self.PageLogin = QtWidgets.QWidget()
        self.PageLogin.setStyleSheet("QPushButton:hover{\n"
"backgroundr:white;\n"
"\n"
"}")
        self.PageLogin.setObjectName("PageLogin")
        self.label = QtWidgets.QLabel(self.PageLogin)
        self.label.setGeometry(QtCore.QRect(270, 30, 571, 431))
        self.label.setStyleSheet("border-radius: 10px;\n"
"background-color: rgb(33, 33, 33)")
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.PageLogin)
        self.label_2.setGeometry(QtCore.QRect(290, 70, 191, 16))
        self.label_2.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 255, 255);")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.PageLogin)
        self.label_3.setGeometry(QtCore.QRect(290, 170, 71, 16))
        self.label_3.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 255, 255);")
        self.label_3.setObjectName("label_3")
        self.label_5 = QtWidgets.QLabel(self.PageLogin)
        self.label_5.setGeometry(QtCore.QRect(540, 380, 61, 16))
        self.label_5.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 255, 255);")
        self.label_5.setObjectName("label_5")
        self.led_LoginPage_Username = QtWidgets.QLineEdit(self.PageLogin)
        self.led_LoginPage_Username.setGeometry(QtCore.QRect(290, 100, 501, 41))
        self.led_LoginPage_Username.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 255, 255);\n"
"\n"
"border: 2px solid white;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username.setObjectName("led_LoginPage_Username")
        self.led_LoginPage_Password = QtWidgets.QLineEdit(self.PageLogin)
        self.led_LoginPage_Password.setGeometry(QtCore.QRect(290, 200, 501, 41))
        self.led_LoginPage_Password.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 255, 255);\n"
"\n"
"border: 2px solid rgb(255, 255, 255);\n"
"border-radius: 10px;\n"
"")
        self.led_LoginPage_Password.setObjectName("led_LoginPage_Password")
        self.btn_LoginPage_Login = QtWidgets.QPushButton(self.PageLogin)
        self.btn_LoginPage_Login.setGeometry(QtCore.QRect(430, 280, 261, 51))
        self.btn_LoginPage_Login.setStyleSheet("QPushButton{\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(6, 46, 175);\n"
"border-radius: 10px\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"backgroundr:white;\n"
"\n"
"}\n"
"")
        self.btn_LoginPage_Login.setObjectName("btn_LoginPage_Login")
        self.btn_LoginPage_ForgotPassword = QtWidgets.QPushButton(self.PageLogin)
        self.btn_LoginPage_ForgotPassword.setGeometry(QtCore.QRect(644, 170, 131, 23))
        self.btn_LoginPage_ForgotPassword.setStyleSheet("color:rgb(255, 255, 255);\n"
"background-color: rgb(171, 98, 255);\n"
"border-radius:10px\n"
"")
        self.btn_LoginPage_ForgotPassword.setObjectName("btn_LoginPage_ForgotPassword")
        self.btn_LoginPage_SignUp = QtWidgets.QPushButton(self.PageLogin)
        self.btn_LoginPage_SignUp.setGeometry(QtCore.QRect(510, 420, 111, 21))
        self.btn_LoginPage_SignUp.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(6, 46, 175);\n"
"border-radius: 4px")
        self.btn_LoginPage_SignUp.setObjectName("btn_LoginPage_SignUp")
        self.lbl_pageLogin_username = QtWidgets.QLabel(self.PageLogin)
        self.lbl_pageLogin_username.setGeometry(QtCore.QRect(300, 140, 191, 16))
        self.lbl_pageLogin_username.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 26, 10)")
        self.lbl_pageLogin_username.setText("")
        self.lbl_pageLogin_username.setObjectName("lbl_pageLogin_username")
        self.lbl_pageLogin_password = QtWidgets.QLabel(self.PageLogin)
        self.lbl_pageLogin_password.setGeometry(QtCore.QRect(300, 240, 191, 16))
        self.lbl_pageLogin_password.setStyleSheet("background-color: rgb(33, 33, 33);\n"
"color: rgb(255, 26, 10)")
        self.lbl_pageLogin_password.setText("")
        self.lbl_pageLogin_password.setObjectName("lbl_pageLogin_password")
        self.label.raise_()
        self.label_2.raise_()
        self.label_3.raise_()
        self.label_5.raise_()
        self.btn_LoginPage_Login.raise_()
        self.btn_LoginPage_ForgotPassword.raise_()
        self.btn_LoginPage_SignUp.raise_()
        self.lbl_pageLogin_username.raise_()
        self.led_LoginPage_Username.raise_()
        self.lbl_pageLogin_password.raise_()
        self.led_LoginPage_Password.raise_()
        self.stackedWidget.addWidget(self.PageLogin)
        self.pageSignUp = QtWidgets.QWidget()
        self.pageSignUp.setObjectName("pageSignUp")
        self.label_4 = QtWidgets.QLabel(self.pageSignUp)
        self.label_4.setGeometry(QtCore.QRect(170, 10, 771, 471))
        self.label_4.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.label_6 = QtWidgets.QLabel(self.pageSignUp)
        self.label_6.setGeometry(QtCore.QRect(180, 20, 201, 451))
        self.label_6.setStyleSheet("background-color: rgb(59, 59, 59);\n"
"border-radius: 10px")
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.pageSignUp)
        self.label_7.setGeometry(QtCore.QRect(390, 20, 541, 61))
        font = QtGui.QFont()
        font.setPointSize(20)
        font.setBold(True)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setStyleSheet("background-color: rgb(59, 59, 59);\n"
"border-radius: 10px;\n"
"color: rgb(255, 255, 255);")
        self.label_7.setAlignment(QtCore.Qt.AlignCenter)
        self.label_7.setObjectName("label_7")
        self.lbl_pageSignUp_personalDetails = QtWidgets.QLabel(self.pageSignUp)
        self.lbl_pageSignUp_personalDetails.setGeometry(QtCore.QRect(180, 100, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Cambria")
        font.setPointSize(20)
        self.lbl_pageSignUp_personalDetails.setFont(font)
        self.lbl_pageSignUp_personalDetails.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border: 2px solid rgb(59, 59, 59);\n"
"border-left:6px solid rgb(255, 6, 18);\n"
"")
        self.lbl_pageSignUp_personalDetails.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageSignUp_personalDetails.setObjectName("lbl_pageSignUp_personalDetails")
        self.lbl_pageSignUp_nextofkin = QtWidgets.QLabel(self.pageSignUp)
        self.lbl_pageSignUp_nextofkin.setGeometry(QtCore.QRect(180, 200, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.lbl_pageSignUp_nextofkin.setFont(font)
        self.lbl_pageSignUp_nextofkin.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border: 2px solid rgb(59, 59, 59);\n"
"border-radius:5px\n"
"")
        self.lbl_pageSignUp_nextofkin.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageSignUp_nextofkin.setObjectName("lbl_pageSignUp_nextofkin")
        self.signUP = QtWidgets.QStackedWidget(self.pageSignUp)
        self.signUP.setGeometry(QtCore.QRect(400, 90, 531, 381))
        self.signUP.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"color: rgb(17, 17, 17);")
        self.signUP.setObjectName("signUP")
        self.pageSignUpPersonalDetails = QtWidgets.QWidget()
        self.pageSignUpPersonalDetails.setObjectName("pageSignUpPersonalDetails")
        self.label_8 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_8.setGeometry(QtCore.QRect(20, 10, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_8.setFont(font)
        self.label_8.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_8.setObjectName("label_8")
        self.led_pageSignup_firstName = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_firstName.setGeometry(QtCore.QRect(20, 40, 171, 21))
        self.led_pageSignup_firstName.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_firstName.setObjectName("led_pageSignup_firstName")
        self.led_pageSignup_lastName = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_lastName.setGeometry(QtCore.QRect(280, 40, 171, 21))
        self.led_pageSignup_lastName.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_lastName.setObjectName("led_pageSignup_lastName")
        self.label_10 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_10.setGeometry(QtCore.QRect(280, 10, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_10.setFont(font)
        self.label_10.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_10.setObjectName("label_10")
        self.led_pageSignup_idNumber = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_idNumber.setGeometry(QtCore.QRect(20, 120, 171, 21))
        self.led_pageSignup_idNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_idNumber.setObjectName("led_pageSignup_idNumber")
        self.label_9 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_9.setGeometry(QtCore.QRect(20, 90, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_9.setFont(font)
        self.label_9.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_9.setObjectName("label_9")
        self.led_pageSignup_emailAddress = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_emailAddress.setGeometry(QtCore.QRect(280, 120, 171, 21))
        self.led_pageSignup_emailAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_emailAddress.setObjectName("led_pageSignup_emailAddress")
        self.label_11 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_11.setGeometry(QtCore.QRect(280, 90, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_11.setFont(font)
        self.label_11.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_11.setObjectName("label_11")
        self.led_pageSignup_phoneNumber = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_phoneNumber.setGeometry(QtCore.QRect(320, 200, 131, 21))
        self.led_pageSignup_phoneNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_phoneNumber.setObjectName("led_pageSignup_phoneNumber")
        self.label_12 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_12.setGeometry(QtCore.QRect(280, 170, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_12.setFont(font)
        self.label_12.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_12.setObjectName("label_12")
        self.label_13 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_13.setGeometry(QtCore.QRect(280, 200, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_13.setFont(font)
        self.label_13.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_13.setObjectName("label_13")
        self.label_14 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_14.setGeometry(QtCore.QRect(280, 250, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_14.setFont(font)
        self.label_14.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_14.setObjectName("label_14")
        self.label_15 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_15.setGeometry(QtCore.QRect(20, 240, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_15.setFont(font)
        self.label_15.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_15.setObjectName("label_15")
        self.btn_pageSignup_personalDetailsNext = QtWidgets.QPushButton(self.pageSignUpPersonalDetails)
        self.btn_pageSignup_personalDetailsNext.setGeometry(QtCore.QRect(340, 330, 121, 41))
        self.btn_pageSignup_personalDetailsNext.setStyleSheet("background-color: rgb(81, 171, 8);\n"
"border-radius:6px")
        self.btn_pageSignup_personalDetailsNext.setObjectName("btn_pageSignup_personalDetailsNext")
        self.led_pageSignup_occupation_2 = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_occupation_2.setGeometry(QtCore.QRect(20, 200, 171, 21))
        self.led_pageSignup_occupation_2.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_occupation_2.setText("")
        self.led_pageSignup_occupation_2.setObjectName("led_pageSignup_occupation_2")
        self.label_16 = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.label_16.setGeometry(QtCore.QRect(20, 170, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_16.setFont(font)
        self.label_16.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_16.setObjectName("label_16")
        self.layoutWidget = QtWidgets.QWidget(self.pageSignUpPersonalDetails)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 270, 122, 36))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.rbn_pageSignUp_male = QtWidgets.QRadioButton(self.layoutWidget)
        self.rbn_pageSignUp_male.setText("")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../../Downloads/icons8-user-male-50.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbn_pageSignUp_male.setIcon(icon)
        self.rbn_pageSignUp_male.setIconSize(QtCore.QSize(30, 30))
        self.rbn_pageSignUp_male.setChecked(True)
        self.rbn_pageSignUp_male.setObjectName("rbn_pageSignUp_male")
        self.horizontalLayout.addWidget(self.rbn_pageSignUp_male)
        self.rbn_pageSignUp_female = QtWidgets.QRadioButton(self.layoutWidget)
        self.rbn_pageSignUp_female.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../../../../Downloads/icons8-female-user-64.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rbn_pageSignUp_female.setIcon(icon1)
        self.rbn_pageSignUp_female.setIconSize(QtCore.QSize(30, 30))
        self.rbn_pageSignUp_female.setObjectName("rbn_pageSignUp_female")
        self.horizontalLayout.addWidget(self.rbn_pageSignUp_female)
        self.lbl_pageSignup_emailNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_emailNotification.setGeometry(QtCore.QRect(280, 140, 221, 16))
        self.lbl_pageSignup_emailNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_emailNotification.setText("")
        self.lbl_pageSignup_emailNotification.setObjectName("lbl_pageSignup_emailNotification")
        self.lbl_pageSignup_IDNumberNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_IDNumberNotification.setGeometry(QtCore.QRect(20, 140, 221, 16))
        self.lbl_pageSignup_IDNumberNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_IDNumberNotification.setText("")
        self.lbl_pageSignup_IDNumberNotification.setObjectName("lbl_pageSignup_IDNumberNotification")
        self.lbl_pageSignup_houseNumberNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_houseNumberNotification.setGeometry(QtCore.QRect(20, 220, 221, 16))
        self.lbl_pageSignup_houseNumberNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_houseNumberNotification.setText("")
        self.lbl_pageSignup_houseNumberNotification.setObjectName("lbl_pageSignup_houseNumberNotification")
        self.lbl_pageSignup_phoneNumberNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_phoneNumberNotification.setGeometry(QtCore.QRect(280, 220, 221, 16))
        self.lbl_pageSignup_phoneNumberNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_phoneNumberNotification.setText("")
        self.lbl_pageSignup_phoneNumberNotification.setObjectName("lbl_pageSignup_phoneNumberNotification")
        self.lbl_pageSignup_FirstNameNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_FirstNameNotification.setGeometry(QtCore.QRect(20, 60, 221, 16))
        self.lbl_pageSignup_FirstNameNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_FirstNameNotification.setText("")
        self.lbl_pageSignup_FirstNameNotification.setObjectName("lbl_pageSignup_FirstNameNotification")
        self.lbl_pageSignup_lastNameNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_lastNameNotification.setGeometry(QtCore.QRect(280, 60, 221, 16))
        self.lbl_pageSignup_lastNameNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_lastNameNotification.setText("")
        self.lbl_pageSignup_lastNameNotification.setObjectName("lbl_pageSignup_lastNameNotification")
        self.led_pageSignup_occupation = QtWidgets.QLineEdit(self.pageSignUpPersonalDetails)
        self.led_pageSignup_occupation.setGeometry(QtCore.QRect(280, 280, 171, 21))
        self.led_pageSignup_occupation.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_occupation.setText("")
        self.led_pageSignup_occupation.setObjectName("led_pageSignup_occupation")
        self.lbl_pageSignup_FillallNotification = QtWidgets.QLabel(self.pageSignUpPersonalDetails)
        self.lbl_pageSignup_FillallNotification.setGeometry(QtCore.QRect(70, 340, 181, 21))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.lbl_pageSignup_FillallNotification.setFont(font)
        self.lbl_pageSignup_FillallNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_FillallNotification.setText("")
        self.lbl_pageSignup_FillallNotification.setObjectName("lbl_pageSignup_FillallNotification")
        self.layoutWidget.raise_()
        self.label_8.raise_()
        self.label_10.raise_()
        self.label_9.raise_()
        self.label_11.raise_()
        self.label_12.raise_()
        self.label_13.raise_()
        self.label_14.raise_()
        self.label_15.raise_()
        self.btn_pageSignup_personalDetailsNext.raise_()
        self.label_16.raise_()
        self.lbl_pageSignup_emailNotification.raise_()
        self.led_pageSignup_emailAddress.raise_()
        self.lbl_pageSignup_IDNumberNotification.raise_()
        self.led_pageSignup_idNumber.raise_()
        self.lbl_pageSignup_houseNumberNotification.raise_()
        self.led_pageSignup_occupation_2.raise_()
        self.lbl_pageSignup_phoneNumberNotification.raise_()
        self.led_pageSignup_phoneNumber.raise_()
        self.lbl_pageSignup_FirstNameNotification.raise_()
        self.lbl_pageSignup_lastNameNotification.raise_()
        self.led_pageSignup_firstName.raise_()
        self.led_pageSignup_lastName.raise_()
        self.led_pageSignup_occupation.raise_()
        self.lbl_pageSignup_FillallNotification.raise_()
        self.signUP.addWidget(self.pageSignUpPersonalDetails)
        self.pageNextOfKin = QtWidgets.QWidget()
        self.pageNextOfKin.setObjectName("pageNextOfKin")
        self.lbl_pageSignUp_nextofkin_2 = QtWidgets.QLabel(self.pageNextOfKin)
        self.lbl_pageSignUp_nextofkin_2.setGeometry(QtCore.QRect(20, 0, 481, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Condensed")
        font.setPointSize(20)
        self.lbl_pageSignUp_nextofkin_2.setFont(font)
        self.lbl_pageSignUp_nextofkin_2.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border: 2px solid rgb(59, 59, 59);\n"
"border-radius:5px\n"
"")
        self.lbl_pageSignUp_nextofkin_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageSignUp_nextofkin_2.setObjectName("lbl_pageSignUp_nextofkin_2")
        self.label_18 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_18.setGeometry(QtCore.QRect(20, 70, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_18.setFont(font)
        self.label_18.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_18.setObjectName("label_18")
        self.led_pageSignup_next_of_kinfirstName = QtWidgets.QLineEdit(self.pageNextOfKin)
        self.led_pageSignup_next_of_kinfirstName.setGeometry(QtCore.QRect(20, 100, 171, 21))
        self.led_pageSignup_next_of_kinfirstName.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_next_of_kinfirstName.setObjectName("led_pageSignup_next_of_kinfirstName")
        self.label_20 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_20.setGeometry(QtCore.QRect(300, 70, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_20.setFont(font)
        self.label_20.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_20.setObjectName("label_20")
        self.led_pageSignup_next_of_kinLastName = QtWidgets.QLineEdit(self.pageNextOfKin)
        self.led_pageSignup_next_of_kinLastName.setGeometry(QtCore.QRect(300, 100, 171, 21))
        self.led_pageSignup_next_of_kinLastName.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_next_of_kinLastName.setObjectName("led_pageSignup_next_of_kinLastName")
        self.label_25 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_25.setGeometry(QtCore.QRect(300, 140, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_25.setFont(font)
        self.label_25.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_25.setObjectName("label_25")
        self.led_pageSignup_next_of_kinemailAddress = QtWidgets.QLineEdit(self.pageNextOfKin)
        self.led_pageSignup_next_of_kinemailAddress.setGeometry(QtCore.QRect(300, 170, 171, 21))
        self.led_pageSignup_next_of_kinemailAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_next_of_kinemailAddress.setText("")
        self.led_pageSignup_next_of_kinemailAddress.setObjectName("led_pageSignup_next_of_kinemailAddress")
        self.label_26 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_26.setGeometry(QtCore.QRect(20, 220, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_26.setObjectName("label_26")
        self.led_pageSignup_next_of_kin_phoneNumber = QtWidgets.QLineEdit(self.pageNextOfKin)
        self.led_pageSignup_next_of_kin_phoneNumber.setGeometry(QtCore.QRect(60, 170, 131, 21))
        self.led_pageSignup_next_of_kin_phoneNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_next_of_kin_phoneNumber.setObjectName("led_pageSignup_next_of_kin_phoneNumber")
        self.label_27 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_27.setGeometry(QtCore.QRect(20, 170, 41, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_27.setObjectName("label_27")
        self.label_28 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_28.setGeometry(QtCore.QRect(20, 140, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_28.setFont(font)
        self.label_28.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_28.setObjectName("label_28")
        self.combo_pageSignup_next_of_kin_relationship = QtWidgets.QComboBox(self.pageNextOfKin)
        self.combo_pageSignup_next_of_kin_relationship.setGeometry(QtCore.QRect(20, 250, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Condensed")
        font.setPointSize(12)
        self.combo_pageSignup_next_of_kin_relationship.setFont(font)
        self.combo_pageSignup_next_of_kin_relationship.setContextMenuPolicy(QtCore.Qt.NoContextMenu)
        self.combo_pageSignup_next_of_kin_relationship.setToolTipDuration(3)
        self.combo_pageSignup_next_of_kin_relationship.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.combo_pageSignup_next_of_kin_relationship.setStyleSheet("background-color: rgb(48, 48, 48);\n"
"border-radius: 5px;\n"
"color: rgb(172, 172, 172);")
        self.combo_pageSignup_next_of_kin_relationship.setObjectName("combo_pageSignup_next_of_kin_relationship")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.combo_pageSignup_next_of_kin_relationship.addItem("")
        self.btn_pageSignup_pageNexofKin_next = QtWidgets.QPushButton(self.pageNextOfKin)
        self.btn_pageSignup_pageNexofKin_next.setGeometry(QtCore.QRect(370, 320, 121, 41))
        self.btn_pageSignup_pageNexofKin_next.setStyleSheet("background-color: rgb(81, 171, 8);\n"
"border-radius:6px")
        self.btn_pageSignup_pageNexofKin_next.setObjectName("btn_pageSignup_pageNexofKin_next")
        self.led_pageSignup_next_of_kinAddress = QtWidgets.QLineEdit(self.pageNextOfKin)
        self.led_pageSignup_next_of_kinAddress.setGeometry(QtCore.QRect(300, 250, 171, 21))
        self.led_pageSignup_next_of_kinAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;\n"
"border-bottom: 2px solid rgb(15, 15, 15)")
        self.led_pageSignup_next_of_kinAddress.setText("")
        self.led_pageSignup_next_of_kinAddress.setObjectName("led_pageSignup_next_of_kinAddress")
        self.label_29 = QtWidgets.QLabel(self.pageNextOfKin)
        self.label_29.setGeometry(QtCore.QRect(300, 220, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_29.setFont(font)
        self.label_29.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_29.setObjectName("label_29")
        self.btn_pageSignup_page_NextofKin_back = QtWidgets.QPushButton(self.pageNextOfKin)
        self.btn_pageSignup_page_NextofKin_back.setGeometry(QtCore.QRect(10, 320, 121, 41))
        self.btn_pageSignup_page_NextofKin_back.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius:6px;\n"
"border: 2px solid rgb(66, 66, 255)")
        self.btn_pageSignup_page_NextofKin_back.setObjectName("btn_pageSignup_page_NextofKin_back")
        self.lbl_pageSignup_NextOfKin_FirstNameNotification = QtWidgets.QLabel(self.pageNextOfKin)
        self.lbl_pageSignup_NextOfKin_FirstNameNotification.setGeometry(QtCore.QRect(20, 120, 221, 16))
        self.lbl_pageSignup_NextOfKin_FirstNameNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_NextOfKin_FirstNameNotification.setText("")
        self.lbl_pageSignup_NextOfKin_FirstNameNotification.setObjectName("lbl_pageSignup_NextOfKin_FirstNameNotification")
        self.lbl_pageSignup_nextfKin_LastNameNotification = QtWidgets.QLabel(self.pageNextOfKin)
        self.lbl_pageSignup_nextfKin_LastNameNotification.setGeometry(QtCore.QRect(300, 120, 221, 16))
        self.lbl_pageSignup_nextfKin_LastNameNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_nextfKin_LastNameNotification.setText("")
        self.lbl_pageSignup_nextfKin_LastNameNotification.setObjectName("lbl_pageSignup_nextfKin_LastNameNotification")
        self.lbl_pageSignup_NextofKin_PhoneNumberNotification = QtWidgets.QLabel(self.pageNextOfKin)
        self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setGeometry(QtCore.QRect(20, 190, 221, 16))
        self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setText("")
        self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setObjectName("lbl_pageSignup_NextofKin_PhoneNumberNotification")
        self.lbl_pageSignup_Fillall_NOK_Notification = QtWidgets.QLabel(self.pageNextOfKin)
        self.lbl_pageSignup_Fillall_NOK_Notification.setGeometry(QtCore.QRect(160, 330, 181, 21))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.lbl_pageSignup_Fillall_NOK_Notification.setFont(font)
        self.lbl_pageSignup_Fillall_NOK_Notification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_Fillall_NOK_Notification.setText("")
        self.lbl_pageSignup_Fillall_NOK_Notification.setObjectName("lbl_pageSignup_Fillall_NOK_Notification")
        self.lbl_pageSignUp_nextofkin_2.raise_()
        self.label_18.raise_()
        self.label_20.raise_()
        self.label_25.raise_()
        self.led_pageSignup_next_of_kinemailAddress.raise_()
        self.label_26.raise_()
        self.label_27.raise_()
        self.label_28.raise_()
        self.combo_pageSignup_next_of_kin_relationship.raise_()
        self.btn_pageSignup_pageNexofKin_next.raise_()
        self.led_pageSignup_next_of_kinAddress.raise_()
        self.label_29.raise_()
        self.btn_pageSignup_page_NextofKin_back.raise_()
        self.lbl_pageSignup_NextOfKin_FirstNameNotification.raise_()
        self.led_pageSignup_next_of_kinfirstName.raise_()
        self.lbl_pageSignup_nextfKin_LastNameNotification.raise_()
        self.led_pageSignup_next_of_kinLastName.raise_()
        self.lbl_pageSignup_NextofKin_PhoneNumberNotification.raise_()
        self.led_pageSignup_next_of_kin_phoneNumber.raise_()
        self.lbl_pageSignup_Fillall_NOK_Notification.raise_()
        self.signUP.addWidget(self.pageNextOfKin)
        self.pagePassword = QtWidgets.QWidget()
        self.pagePassword.setObjectName("pagePassword")
        self.label_21 = QtWidgets.QLabel(self.pagePassword)
        self.label_21.setGeometry(QtCore.QRect(30, 80, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_21.setFont(font)
        self.label_21.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_21.setObjectName("label_21")
        self.btn_pageSignup_pagePassword_back = QtWidgets.QPushButton(self.pagePassword)
        self.btn_pageSignup_pagePassword_back.setGeometry(QtCore.QRect(190, 320, 121, 41))
        self.btn_pageSignup_pagePassword_back.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius:6px;\n"
"border: 2px solid rgb(66, 66, 255)")
        self.btn_pageSignup_pagePassword_back.setObjectName("btn_pageSignup_pagePassword_back")
        self.lbl_pageSignUp_nextofkin_3 = QtWidgets.QLabel(self.pagePassword)
        self.lbl_pageSignUp_nextofkin_3.setGeometry(QtCore.QRect(30, 0, 481, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Condensed")
        font.setPointSize(20)
        self.lbl_pageSignUp_nextofkin_3.setFont(font)
        self.lbl_pageSignUp_nextofkin_3.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border: 2px solid rgb(59, 59, 59);\n"
"border-radius:5px\n"
"")
        self.lbl_pageSignUp_nextofkin_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageSignUp_nextofkin_3.setObjectName("lbl_pageSignUp_nextofkin_3")
        self.btn_pageSignup_signUp = QtWidgets.QPushButton(self.pagePassword)
        self.btn_pageSignup_signUp.setGeometry(QtCore.QRect(190, 220, 121, 41))
        self.btn_pageSignup_signUp.setStyleSheet("background-color: rgb(81, 171, 8);\n"
"border-radius:6px")
        self.btn_pageSignup_signUp.setObjectName("btn_pageSignup_signUp")
        self.led_pageSignup_newPassword = QtWidgets.QLineEdit(self.pagePassword)
        self.led_pageSignup_newPassword.setGeometry(QtCore.QRect(30, 110, 181, 31))
        self.led_pageSignup_newPassword.setStyleSheet("border: 2px solid rgb(15, 15, 15);\n"
"\n"
"border-radius: 10px;\n"
"")
        self.led_pageSignup_newPassword.setObjectName("led_pageSignup_newPassword")
        self.label_31 = QtWidgets.QLabel(self.pagePassword)
        self.label_31.setGeometry(QtCore.QRect(290, 80, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.label_31.setObjectName("label_31")
        self.led_pageSignup_repeatPassword = QtWidgets.QLineEdit(self.pagePassword)
        self.led_pageSignup_repeatPassword.setGeometry(QtCore.QRect(290, 110, 211, 31))
        self.led_pageSignup_repeatPassword.setStyleSheet("border: 2px solid rgb(15, 15, 15);\n"
"\n"
"border-radius: 10px;\n"
"")
        self.led_pageSignup_repeatPassword.setObjectName("led_pageSignup_repeatPassword")
        self.lbl_pagePassword_NewpasswordNotification = QtWidgets.QLabel(self.pagePassword)
        self.lbl_pagePassword_NewpasswordNotification.setGeometry(QtCore.QRect(30, 140, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lbl_pagePassword_NewpasswordNotification.setFont(font)
        self.lbl_pagePassword_NewpasswordNotification.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.lbl_pagePassword_NewpasswordNotification.setText("")
        self.lbl_pagePassword_NewpasswordNotification.setObjectName("lbl_pagePassword_NewpasswordNotification")
        self.lbl_pagePassword_RepeatPasswordNotification = QtWidgets.QLabel(self.pagePassword)
        self.lbl_pagePassword_RepeatPasswordNotification.setGeometry(QtCore.QRect(290, 140, 171, 21))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.lbl_pagePassword_RepeatPasswordNotification.setFont(font)
        self.lbl_pagePassword_RepeatPasswordNotification.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border-radius: 10px;\n"
"color: rgb(17, 17, 17);")
        self.lbl_pagePassword_RepeatPasswordNotification.setText("")
        self.lbl_pagePassword_RepeatPasswordNotification.setObjectName("lbl_pagePassword_RepeatPasswordNotification")
        self.lbl_pageSignup_Fillall_Password_Notification = QtWidgets.QLabel(self.pagePassword)
        self.lbl_pageSignup_Fillall_Password_Notification.setGeometry(QtCore.QRect(160, 180, 181, 21))
        font = QtGui.QFont()
        font.setFamily("MV Boli")
        font.setPointSize(12)
        self.lbl_pageSignup_Fillall_Password_Notification.setFont(font)
        self.lbl_pageSignup_Fillall_Password_Notification.setStyleSheet("color: rgb(229, 6, 28);")
        self.lbl_pageSignup_Fillall_Password_Notification.setText("")
        self.lbl_pageSignup_Fillall_Password_Notification.setObjectName("lbl_pageSignup_Fillall_Password_Notification")
        self.label_21.raise_()
        self.btn_pageSignup_pagePassword_back.raise_()
        self.lbl_pageSignUp_nextofkin_3.raise_()
        self.btn_pageSignup_signUp.raise_()
        self.label_31.raise_()
        self.lbl_pagePassword_NewpasswordNotification.raise_()
        self.led_pageSignup_newPassword.raise_()
        self.lbl_pagePassword_RepeatPasswordNotification.raise_()
        self.led_pageSignup_repeatPassword.raise_()
        self.lbl_pageSignup_Fillall_Password_Notification.raise_()
        self.signUP.addWidget(self.pagePassword)
        self.btn_PageSignUp_BacktoLogin = QtWidgets.QPushButton(self.pageSignUp)
        self.btn_PageSignUp_BacktoLogin.setGeometry(QtCore.QRect(210, 410, 121, 41))
        self.btn_PageSignUp_BacktoLogin.setStyleSheet("border-radius:6px;\n"
"background-color: rgb(7, 65, 255);\n"
"border: 2px solid rgb(66, 66, 255)")
        self.btn_PageSignUp_BacktoLogin.setObjectName("btn_PageSignUp_BacktoLogin")
        self.lbl_pageSignUp_password = QtWidgets.QLabel(self.pageSignUp)
        self.lbl_pageSignUp_password.setGeometry(QtCore.QRect(180, 300, 201, 61))
        font = QtGui.QFont()
        font.setFamily("Calibri")
        font.setPointSize(20)
        self.lbl_pageSignUp_password.setFont(font)
        self.lbl_pageSignUp_password.setStyleSheet("background-color: rgb(203, 203, 203);\n"
"border: 2px solid rgb(59, 59, 59);\n"
"border-radius:5px\n"
"")
        self.lbl_pageSignUp_password.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageSignUp_password.setObjectName("lbl_pageSignUp_password")
        self.stackedWidget.addWidget(self.pageSignUp)
        self.pageForgotPassword = QtWidgets.QWidget()
        self.pageForgotPassword.setObjectName("pageForgotPassword")
        self.label_17 = QtWidgets.QLabel(self.pageForgotPassword)
        self.label_17.setGeometry(QtCore.QRect(260, 40, 501, 331))
        self.label_17.setStyleSheet("border-radius:15px;\n"
"background-color: rgb(61, 61, 61);\n"
"")
        self.label_17.setText("")
        self.label_17.setObjectName("label_17")
        self.lbl_pageForgotPassword_email = QtWidgets.QLabel(self.pageForgotPassword)
        self.lbl_pageForgotPassword_email.setGeometry(QtCore.QRect(350, 120, 131, 31))
        self.lbl_pageForgotPassword_email.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(61, 61, 61);\n"
"")
        self.lbl_pageForgotPassword_email.setObjectName("lbl_pageForgotPassword_email")
        self.btn_pageForgotPassword_continue = QtWidgets.QPushButton(self.pageForgotPassword)
        self.btn_pageForgotPassword_continue.setGeometry(QtCore.QRect(450, 230, 141, 41))
        self.btn_pageForgotPassword_continue.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageForgotPassword_continue.setObjectName("btn_pageForgotPassword_continue")
        self.led_pageForgotPassword_Username = QtWidgets.QLineEdit(self.pageForgotPassword)
        self.led_pageForgotPassword_Username.setGeometry(QtCore.QRect(350, 150, 361, 31))
        self.led_pageForgotPassword_Username.setStyleSheet("background-color: rgb(61, 61, 61);\n"
"color: rgb(255, 255, 255);\n"
"border: 2px solid white;\n"
"border-radius:5px;")
        self.led_pageForgotPassword_Username.setObjectName("led_pageForgotPassword_Username")
        self.btn_pageForgotPassword_BacktoLogin = QtWidgets.QPushButton(self.pageForgotPassword)
        self.btn_pageForgotPassword_BacktoLogin.setGeometry(QtCore.QRect(260, 40, 141, 51))
        self.btn_pageForgotPassword_BacktoLogin.setStyleSheet("background-color:rgb(22, 172, 5);\n"
"border-radius:10px;\n"
"border-bottom-left-radius: 0px\n"
"")
        self.btn_pageForgotPassword_BacktoLogin.setObjectName("btn_pageForgotPassword_BacktoLogin")
        self.label_22 = QtWidgets.QLabel(self.pageForgotPassword)
        self.label_22.setGeometry(QtCore.QRect(260, 40, 501, 51))
        self.label_22.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color:rgb(108, 108, 108);\n"
"border-radius:15px;\n"
"\n"
"")
        self.label_22.setText("")
        self.label_22.setObjectName("label_22")
        self.label_23 = QtWidgets.QLabel(self.pageForgotPassword)
        self.label_23.setGeometry(QtCore.QRect(260, 60, 501, 31))
        self.label_23.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color:rgb(108, 108, 108);\n"
"\n"
"")
        self.label_23.setText("")
        self.label_23.setObjectName("label_23")
        self.label_24 = QtWidgets.QLabel(self.pageForgotPassword)
        self.label_24.setGeometry(QtCore.QRect(410, 40, 301, 51))
        font = QtGui.QFont()
        font.setFamily("Niagara Engraved")
        font.setPointSize(36)
        self.label_24.setFont(font)
        self.label_24.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color:rgb(108, 108, 108);\n"
"\n"
"")
        self.label_24.setAlignment(QtCore.Qt.AlignCenter)
        self.label_24.setObjectName("label_24")
        self.lbl_pageForgotPassword_emailNotification = QtWidgets.QLabel(self.pageForgotPassword)
        self.lbl_pageForgotPassword_emailNotification.setGeometry(QtCore.QRect(350, 170, 381, 41))
        font = QtGui.QFont()
        font.setFamily("Arial Narrow")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lbl_pageForgotPassword_emailNotification.setFont(font)
        self.lbl_pageForgotPassword_emailNotification.setStyleSheet("color:rgb(255, 44, 7);\n"
"background-color: rgb(61, 61, 61);\n"
"")
        self.lbl_pageForgotPassword_emailNotification.setText("")
        self.lbl_pageForgotPassword_emailNotification.setObjectName("lbl_pageForgotPassword_emailNotification")
        self.btn_pageForgotPassword_verifyCode = QtWidgets.QPushButton(self.pageForgotPassword)
        self.btn_pageForgotPassword_verifyCode.setGeometry(QtCore.QRect(450, 310, 141, 41))
        self.btn_pageForgotPassword_verifyCode.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageForgotPassword_verifyCode.setObjectName("btn_pageForgotPassword_verifyCode")
        self.led_pageForgotPassword_verificationCode = QtWidgets.QLineEdit(self.pageForgotPassword)
        self.led_pageForgotPassword_verificationCode.setGeometry(QtCore.QRect(350, 240, 361, 31))
        self.led_pageForgotPassword_verificationCode.setStyleSheet("background-color: rgb(61, 61, 61);\n"
"color: rgb(255, 255, 255);\n"
"border: 2px solid white;\n"
"border-radius:5px;")
        self.led_pageForgotPassword_verificationCode.setObjectName("led_pageForgotPassword_verificationCode")
        self.lbl_pageForgotPassword_verificationcode = QtWidgets.QLabel(self.pageForgotPassword)
        self.lbl_pageForgotPassword_verificationcode.setGeometry(QtCore.QRect(350, 210, 231, 31))
        self.lbl_pageForgotPassword_verificationcode.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(61, 61, 61);\n"
"")
        self.lbl_pageForgotPassword_verificationcode.setObjectName("lbl_pageForgotPassword_verificationcode")
        self.lbl_pageForgotPassword_verificationNotification = QtWidgets.QLabel(self.pageForgotPassword)
        self.lbl_pageForgotPassword_verificationNotification.setGeometry(QtCore.QRect(350, 270, 231, 31))
        font = QtGui.QFont()
        font.setFamily("Arial Narrow")
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.lbl_pageForgotPassword_verificationNotification.setFont(font)
        self.lbl_pageForgotPassword_verificationNotification.setStyleSheet("color:rgb(255, 44, 7);\n"
"background-color: rgb(61, 61, 61);\n"
"")
        self.lbl_pageForgotPassword_verificationNotification.setText("")
        self.lbl_pageForgotPassword_verificationNotification.setObjectName("lbl_pageForgotPassword_verificationNotification")
        self.btn_pageForgotPassword_updatePassword = QtWidgets.QPushButton(self.pageForgotPassword)
        self.btn_pageForgotPassword_updatePassword.setGeometry(QtCore.QRect(450, 310, 141, 41))
        self.btn_pageForgotPassword_updatePassword.setStyleSheet("background-color: rgb(16, 255, 12);\n"
"border-radius:10px\n"
"")
        self.btn_pageForgotPassword_updatePassword.setObjectName("btn_pageForgotPassword_updatePassword")
        self.led_pageForgotPassword_newpassword = QtWidgets.QLineEdit(self.pageForgotPassword)
        self.led_pageForgotPassword_newpassword.setGeometry(QtCore.QRect(350, 150, 361, 31))
        self.led_pageForgotPassword_newpassword.setStyleSheet("background-color: rgb(61, 61, 61);\n"
"color: rgb(255, 255, 255);\n"
"border: 2px solid white;\n"
"border-radius:5px;")
        self.led_pageForgotPassword_newpassword.setObjectName("led_pageForgotPassword_newpassword")
        self.led_pageForgotPassword_confirmPassword = QtWidgets.QLineEdit(self.pageForgotPassword)
        self.led_pageForgotPassword_confirmPassword.setGeometry(QtCore.QRect(350, 240, 361, 31))
        self.led_pageForgotPassword_confirmPassword.setStyleSheet("background-color: rgb(61, 61, 61);\n"
"color: rgb(255, 255, 255);\n"
"border: 2px solid white;\n"
"border-radius:5px;")
        self.led_pageForgotPassword_confirmPassword.setObjectName("led_pageForgotPassword_confirmPassword")
        self.label_17.raise_()
        self.lbl_pageForgotPassword_email.raise_()
        self.label_22.raise_()
        self.label_23.raise_()
        self.btn_pageForgotPassword_BacktoLogin.raise_()
        self.label_24.raise_()
        self.lbl_pageForgotPassword_emailNotification.raise_()
        self.btn_pageForgotPassword_verifyCode.raise_()
        self.lbl_pageForgotPassword_verificationcode.raise_()
        self.lbl_pageForgotPassword_verificationNotification.raise_()
        self.led_pageForgotPassword_verificationCode.raise_()
        self.btn_pageForgotPassword_updatePassword.raise_()
        self.led_pageForgotPassword_newpassword.raise_()
        self.led_pageForgotPassword_confirmPassword.raise_()
        self.led_pageForgotPassword_Username.raise_()
        self.btn_pageForgotPassword_continue.raise_()
        self.stackedWidget.addWidget(self.pageForgotPassword)
        self.pageHomepage = QtWidgets.QWidget()
        self.pageHomepage.setObjectName("pageHomepage")
        self.stackedWidget_2 = QtWidgets.QStackedWidget(self.pageHomepage)
        self.stackedWidget_2.setGeometry(QtCore.QRect(189, 0, 931, 501))
        self.stackedWidget_2.setMinimumSize(QtCore.QSize(871, 501))
        self.stackedWidget_2.setStyleSheet("background-color: rgb(113, 113, 113);")
        self.stackedWidget_2.setObjectName("stackedWidget_2")
        self.pageRealHomepage = QtWidgets.QWidget()
        self.pageRealHomepage.setObjectName("pageRealHomepage")
        self.lbl_pageHomepage_welcomeUser_2 = QtWidgets.QLabel(self.pageRealHomepage)
        self.lbl_pageHomepage_welcomeUser_2.setGeometry(QtCore.QRect(0, 0, 871, 81))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.lbl_pageHomepage_welcomeUser_2.setFont(font)
        self.lbl_pageHomepage_welcomeUser_2.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_2.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_2.setObjectName("lbl_pageHomepage_welcomeUser_2")
        self.toolButton = QtWidgets.QToolButton(self.pageRealHomepage)
        self.toolButton.setGeometry(QtCore.QRect(40, 120, 201, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton.setFont(font)
        self.toolButton.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(41, 166, 18);\n"
"padding-top:10px;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/icons/icons/icons.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton.setIcon(icon2)
        self.toolButton.setIconSize(QtCore.QSize(80, 80))
        self.toolButton.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton.setObjectName("toolButton")
        self.toolButton_2 = QtWidgets.QToolButton(self.pageRealHomepage)
        self.toolButton_2.setGeometry(QtCore.QRect(350, 120, 211, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_2.setFont(font)
        self.toolButton_2.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(26, 29, 166);\n"
"padding-top:10px;")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-chat-room-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_2.setIcon(icon3)
        self.toolButton_2.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_2.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_2.setObjectName("toolButton_2")
        self.toolButton_3 = QtWidgets.QToolButton(self.pageRealHomepage)
        self.toolButton_3.setGeometry(QtCore.QRect(40, 320, 201, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_3.setFont(font)
        self.toolButton_3.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(197, 200, 11);\n"
"padding-top:10px;")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-repairs-60.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_3.setIcon(icon4)
        self.toolButton_3.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_3.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_3.setObjectName("toolButton_3")
        self.toolButton_4 = QtWidgets.QToolButton(self.pageRealHomepage)
        self.toolButton_4.setGeometry(QtCore.QRect(640, 120, 201, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_4.setFont(font)
        self.toolButton_4.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(188, 2, 14);\n"
"padding-top:10px;")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-strike-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_4.setIcon(icon5)
        self.toolButton_4.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_4.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_4.setObjectName("toolButton_4")
        self.toolButton_5 = QtWidgets.QToolButton(self.pageRealHomepage)
        self.toolButton_5.setGeometry(QtCore.QRect(350, 320, 211, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_5.setFont(font)
        self.toolButton_5.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(126, 126, 126);\n"
"padding-top:10px;")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-leave-house-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_5.setIcon(icon6)
        self.toolButton_5.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_5.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_5.setObjectName("toolButton_5")
        self.toolButton_6 = QtWidgets.QToolButton(self.pageRealHomepage)
        self.toolButton_6.setGeometry(QtCore.QRect(640, 320, 211, 141))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.toolButton_6.setFont(font)
        self.toolButton_6.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(41, 166, 18);\n"
"padding-top:10px;\n"
"padding:5px")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-view-90.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.toolButton_6.setIcon(icon7)
        self.toolButton_6.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_6.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_6.setObjectName("toolButton_6")
        self.stackedWidget_2.addWidget(self.pageRealHomepage)
        self.pagePayRent = QtWidgets.QWidget()
        self.pagePayRent.setObjectName("pagePayRent")
        self.lbl_pageHomepage_welcomeUser_3 = QtWidgets.QLabel(self.pagePayRent)
        self.lbl_pageHomepage_welcomeUser_3.setGeometry(QtCore.QRect(0, -10, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_3.setFont(font)
        self.lbl_pageHomepage_welcomeUser_3.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_3.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_3.setObjectName("lbl_pageHomepage_welcomeUser_3")
        self.led_LoginPage_Username_2 = QtWidgets.QLineEdit(self.pagePayRent)
        self.led_LoginPage_Username_2.setGeometry(QtCore.QRect(60, 120, 311, 41))
        self.led_LoginPage_Username_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:12px;\n"
"border: 2px solid white;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_2.setObjectName("led_LoginPage_Username_2")
        self.label_40 = QtWidgets.QLabel(self.pagePayRent)
        self.label_40.setGeometry(QtCore.QRect(60, 90, 211, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_40.setFont(font)
        self.label_40.setStyleSheet("")
        self.label_40.setObjectName("label_40")
        self.label_41 = QtWidgets.QLabel(self.pagePayRent)
        self.label_41.setGeometry(QtCore.QRect(530, 90, 211, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_41.setFont(font)
        self.label_41.setStyleSheet("")
        self.label_41.setObjectName("label_41")
        self.label_42 = QtWidgets.QLabel(self.pagePayRent)
        self.label_42.setGeometry(QtCore.QRect(60, 190, 211, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_42.setFont(font)
        self.label_42.setStyleSheet("")
        self.label_42.setObjectName("label_42")
        self.label_43 = QtWidgets.QLabel(self.pagePayRent)
        self.label_43.setGeometry(QtCore.QRect(530, 190, 211, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_43.setFont(font)
        self.label_43.setStyleSheet("")
        self.label_43.setObjectName("label_43")
        self.comboBox = QtWidgets.QComboBox(self.pagePayRent)
        self.comboBox.setGeometry(QtCore.QRect(530, 120, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.comboBox.setFont(font)
        self.comboBox.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:20px;\n"
"border: 2px solid white;\n"
"border-radius: 10px;")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.dateEdit = QtWidgets.QDateEdit(self.pagePayRent)
        self.dateEdit.setGeometry(QtCore.QRect(60, 220, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.dateEdit.setFont(font)
        self.dateEdit.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:15px;\n"
"border: 2px solid white;\n"
"border-radius: 10px;")
        self.dateEdit.setObjectName("dateEdit")
        self.comboBox_2 = QtWidgets.QComboBox(self.pagePayRent)
        self.comboBox_2.setGeometry(QtCore.QRect(530, 220, 281, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.comboBox_2.setFont(font)
        self.comboBox_2.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:20px;\n"
"border: 2px solid white;\n"
"border-radius: 10px;")
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.btn_pageForgotPassword_updatePassword_2 = QtWidgets.QPushButton(self.pagePayRent)
        self.btn_pageForgotPassword_updatePassword_2.setGeometry(QtCore.QRect(410, 430, 141, 41))
        self.btn_pageForgotPassword_updatePassword_2.setStyleSheet("background-color: rgb(16, 255, 12);\n"
"border-radius:10px\n"
"")
        self.btn_pageForgotPassword_updatePassword_2.setObjectName("btn_pageForgotPassword_updatePassword_2")
        self.label_51 = QtWidgets.QLabel(self.pagePayRent)
        self.label_51.setGeometry(QtCore.QRect(60, 290, 211, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_51.setFont(font)
        self.label_51.setStyleSheet("")
        self.label_51.setObjectName("label_51")
        self.led_LoginPage_Username_4 = QtWidgets.QLineEdit(self.pagePayRent)
        self.led_LoginPage_Username_4.setGeometry(QtCore.QRect(60, 320, 311, 41))
        self.led_LoginPage_Username_4.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:12px;\n"
"border: 2px solid white;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_4.setText("")
        self.led_LoginPage_Username_4.setObjectName("led_LoginPage_Username_4")
        self.stackedWidget_2.addWidget(self.pagePayRent)
        self.pageChat = QtWidgets.QWidget()
        self.pageChat.setObjectName("pageChat")
        self.label_33 = QtWidgets.QLabel(self.pageChat)
        self.label_33.setGeometry(QtCore.QRect(10, 110, 181, 211))
        self.label_33.setStyleSheet("background-color: rgb(52, 52, 52);\n"
"border-radius: 8px")
        self.label_33.setText("")
        self.label_33.setObjectName("label_33")
        self.ted_pageChat_chatbox_owner = QtWidgets.QTextEdit(self.pageChat)
        self.ted_pageChat_chatbox_owner.setGeometry(QtCore.QRect(210, 10, 641, 401))
        self.ted_pageChat_chatbox_owner.setStyleSheet("background-color: rgb(52, 52, 52);\n"
"border-radius: 8px;\n"
"color: rgb(255, 255, 255);")
        self.ted_pageChat_chatbox_owner.setObjectName("ted_pageChat_chatbox_owner")
        self.led_pageChat_message = QtWidgets.QLineEdit(self.pageChat)
        self.led_pageChat_message.setGeometry(QtCore.QRect(250, 430, 501, 41))
        self.led_pageChat_message.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius: 8px")
        self.led_pageChat_message.setObjectName("led_pageChat_message")
        self.btn_pageChat_send = QtWidgets.QPushButton(self.pageChat)
        self.btn_pageChat_send.setGeometry(QtCore.QRect(748, 430, 71, 41))
        self.btn_pageChat_send.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"border-radius: 4px")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/icons/icons/send.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_pageChat_send.setIcon(icon8)
        self.btn_pageChat_send.setIconSize(QtCore.QSize(40, 40))
        self.btn_pageChat_send.setCheckable(False)
        self.btn_pageChat_send.setChecked(False)
        self.btn_pageChat_send.setAutoDefault(False)
        self.btn_pageChat_send.setObjectName("btn_pageChat_send")
        self.btn_pageChat_chatWithManager = QtWidgets.QPushButton(self.pageChat)
        self.btn_pageChat_chatWithManager.setGeometry(QtCore.QRect(30, 140, 141, 61))
        self.btn_pageChat_chatWithManager.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageChat_chatWithManager.setObjectName("btn_pageChat_chatWithManager")
        self.btn_pageChat_chatWithOwner = QtWidgets.QPushButton(self.pageChat)
        self.btn_pageChat_chatWithOwner.setGeometry(QtCore.QRect(30, 230, 141, 61))
        self.btn_pageChat_chatWithOwner.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageChat_chatWithOwner.setObjectName("btn_pageChat_chatWithOwner")
        self.ted_pageChat_chatbox_manager = QtWidgets.QTextEdit(self.pageChat)
        self.ted_pageChat_chatbox_manager.setGeometry(QtCore.QRect(210, 10, 641, 401))
        self.ted_pageChat_chatbox_manager.setStyleSheet("background-color: rgb(52, 52, 52);\n"
"border-radius: 8px;\n"
"color: rgb(255, 255, 255);")
        self.ted_pageChat_chatbox_manager.setObjectName("ted_pageChat_chatbox_manager")
        self.label_33.raise_()
        self.ted_pageChat_chatbox_owner.raise_()
        self.btn_pageChat_send.raise_()
        self.btn_pageChat_chatWithManager.raise_()
        self.btn_pageChat_chatWithOwner.raise_()
        self.ted_pageChat_chatbox_manager.raise_()
        self.led_pageChat_message.raise_()
        self.stackedWidget_2.addWidget(self.pageChat)
        self.pageReport_a_complaint = QtWidgets.QWidget()
        self.pageReport_a_complaint.setObjectName("pageReport_a_complaint")
        self.label_34 = QtWidgets.QLabel(self.pageReport_a_complaint)
        self.label_34.setGeometry(QtCore.QRect(160, 20, 631, 461))
        self.label_34.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);")
        self.label_34.setText("")
        self.label_34.setObjectName("label_34")
        self.label_35 = QtWidgets.QLabel(self.pageReport_a_complaint)
        self.label_35.setGeometry(QtCore.QRect(300, 85, 91, 21))
        self.label_35.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);")
        self.label_35.setObjectName("label_35")
        self.ted_pageReportAComplaint_describeComplaint = QtWidgets.QTextEdit(self.pageReport_a_complaint)
        self.ted_pageReportAComplaint_describeComplaint.setGeometry(QtCore.QRect(250, 220, 471, 191))
        self.ted_pageReportAComplaint_describeComplaint.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);\n"
"color: rgb(39, 39, 39);\n"
"border: 2px solid black")
        self.ted_pageReportAComplaint_describeComplaint.setObjectName("ted_pageReportAComplaint_describeComplaint")
        self.date_pageReport_a_complaint_date_of_incedence = QtWidgets.QDateEdit(self.pageReport_a_complaint)
        self.date_pageReport_a_complaint_date_of_incedence.setGeometry(QtCore.QRect(420, 80, 181, 31))
        self.date_pageReport_a_complaint_date_of_incedence.setStyleSheet("background-color: rgb(170, 170, 127);\n"
"border-radius: 4px;\n"
"border: 2px solid black;\n"
"padding-left:10px;")
        self.date_pageReport_a_complaint_date_of_incedence.setObjectName("date_pageReport_a_complaint_date_of_incedence")
        self.label_36 = QtWidgets.QLabel(self.pageReport_a_complaint)
        self.label_36.setGeometry(QtCore.QRect(280, 140, 111, 31))
        self.label_36.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);")
        self.label_36.setObjectName("label_36")
        self.combo_pageReportAComplaint_category_of_complaint = QtWidgets.QComboBox(self.pageReport_a_complaint)
        self.combo_pageReportAComplaint_category_of_complaint.setGeometry(QtCore.QRect(420, 141, 181, 31))
        self.combo_pageReportAComplaint_category_of_complaint.setStyleSheet("background-color: rgb(170, 170, 127);\n"
"border-radius: 4px;\n"
"border: 2px solid black;\n"
"padding-left:10px")
        self.combo_pageReportAComplaint_category_of_complaint.setObjectName("combo_pageReportAComplaint_category_of_complaint")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint.addItem("")
        self.label_37 = QtWidgets.QLabel(self.pageReport_a_complaint)
        self.label_37.setGeometry(QtCore.QRect(430, 190, 111, 31))
        self.label_37.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);")
        self.label_37.setObjectName("label_37")
        self.label_38 = QtWidgets.QLabel(self.pageReport_a_complaint)
        self.label_38.setGeometry(QtCore.QRect(160, 20, 631, 41))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Condensed")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.label_38.setFont(font)
        self.label_38.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);")
        self.label_38.setAlignment(QtCore.Qt.AlignCenter)
        self.label_38.setObjectName("label_38")
        self.btn_pageReportAComplaint_backToHomepage = QtWidgets.QPushButton(self.pageReport_a_complaint)
        self.btn_pageReportAComplaint_backToHomepage.setGeometry(QtCore.QRect(190, 430, 111, 41))
        self.btn_pageReportAComplaint_backToHomepage.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_backToHomepage.setObjectName("btn_pageReportAComplaint_backToHomepage")
        self.btn_pageReportAComplaint_submitComplaint = QtWidgets.QPushButton(self.pageReport_a_complaint)
        self.btn_pageReportAComplaint_submitComplaint.setGeometry(QtCore.QRect(570, 430, 171, 41))
        self.btn_pageReportAComplaint_submitComplaint.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint.setObjectName("btn_pageReportAComplaint_submitComplaint")
        self.label_39 = QtWidgets.QLabel(self.pageReport_a_complaint)
        self.label_39.setGeometry(QtCore.QRect(160, 110, 631, 31))
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label_39.setFont(font)
        self.label_39.setStyleSheet("border-radius:7px;\n"
"background-color: rgb(170, 170, 127);\n"
"color: rgb(207, 8, 22);")
        self.label_39.setText("")
        self.label_39.setAlignment(QtCore.Qt.AlignCenter)
        self.label_39.setObjectName("label_39")
        self.label_34.raise_()
        self.label_35.raise_()
        self.label_36.raise_()
        self.combo_pageReportAComplaint_category_of_complaint.raise_()
        self.label_37.raise_()
        self.ted_pageReportAComplaint_describeComplaint.raise_()
        self.label_38.raise_()
        self.btn_pageReportAComplaint_backToHomepage.raise_()
        self.btn_pageReportAComplaint_submitComplaint.raise_()
        self.label_39.raise_()
        self.date_pageReport_a_complaint_date_of_incedence.raise_()
        self.stackedWidget_2.addWidget(self.pageReport_a_complaint)
        self.pageSchedulerepairs = QtWidgets.QWidget()
        self.pageSchedulerepairs.setObjectName("pageSchedulerepairs")
        self.lbl_pageHomepage_welcomeUser_4 = QtWidgets.QLabel(self.pageSchedulerepairs)
        self.lbl_pageHomepage_welcomeUser_4.setGeometry(QtCore.QRect(0, 20, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_4.setFont(font)
        self.lbl_pageHomepage_welcomeUser_4.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_4.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_4.setObjectName("lbl_pageHomepage_welcomeUser_4")
        self.label_44 = QtWidgets.QLabel(self.pageSchedulerepairs)
        self.label_44.setGeometry(QtCore.QRect(380, 230, 211, 31))
        self.label_44.setStyleSheet("border-radius:7px;\n"
"")
        self.label_44.setObjectName("label_44")
        self.ted_pageReportAComplaint_describeComplaint_2 = QtWidgets.QTextEdit(self.pageSchedulerepairs)
        self.ted_pageReportAComplaint_describeComplaint_2.setGeometry(QtCore.QRect(240, 260, 471, 161))
        self.ted_pageReportAComplaint_describeComplaint_2.setStyleSheet("border-radius:7px;\n"
"color: rgb(39, 39, 39);\n"
"border: 2px solid black")
        self.ted_pageReportAComplaint_describeComplaint_2.setObjectName("ted_pageReportAComplaint_describeComplaint_2")
        self.label_45 = QtWidgets.QLabel(self.pageSchedulerepairs)
        self.label_45.setGeometry(QtCore.QRect(260, 99, 131, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_45.setFont(font)
        self.label_45.setStyleSheet("border-radius:7px;\n"
"")
        self.label_45.setObjectName("label_45")
        self.combo_pageReportAComplaint_category_of_complaint_2 = QtWidgets.QComboBox(self.pageSchedulerepairs)
        self.combo_pageReportAComplaint_category_of_complaint_2.setGeometry(QtCore.QRect(410, 100, 181, 31))
        self.combo_pageReportAComplaint_category_of_complaint_2.setStyleSheet("border-radius: 4px;\n"
"border: 2px solid black;\n"
"padding-left:10px;")
        self.combo_pageReportAComplaint_category_of_complaint_2.setObjectName("combo_pageReportAComplaint_category_of_complaint_2")
        self.combo_pageReportAComplaint_category_of_complaint_2.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint_2.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint_2.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint_2.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint_2.addItem("")
        self.combo_pageReportAComplaint_category_of_complaint_2.addItem("")
        self.btn_pageReportAComplaint_submitComplaint_2 = QtWidgets.QPushButton(self.pageSchedulerepairs)
        self.btn_pageReportAComplaint_submitComplaint_2.setGeometry(QtCore.QRect(560, 440, 171, 41))
        self.btn_pageReportAComplaint_submitComplaint_2.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_2.setObjectName("btn_pageReportAComplaint_submitComplaint_2")
        self.date_pageReport_a_complaint_date_of_incedence_2 = QtWidgets.QDateEdit(self.pageSchedulerepairs)
        self.date_pageReport_a_complaint_date_of_incedence_2.setGeometry(QtCore.QRect(410, 165, 181, 31))
        self.date_pageReport_a_complaint_date_of_incedence_2.setStyleSheet("border-radius: 4px;\n"
"padding-left:10px;\n"
"border: 2px solid black")
        self.date_pageReport_a_complaint_date_of_incedence_2.setObjectName("date_pageReport_a_complaint_date_of_incedence_2")
        self.label_46 = QtWidgets.QLabel(self.pageSchedulerepairs)
        self.label_46.setGeometry(QtCore.QRect(260, 160, 141, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_46.setFont(font)
        self.label_46.setStyleSheet("border-radius:7px;\n"
"")
        self.label_46.setObjectName("label_46")
        self.stackedWidget_2.addWidget(self.pageSchedulerepairs)
        self.pageVacationNotice = QtWidgets.QWidget()
        self.pageVacationNotice.setObjectName("pageVacationNotice")
        self.date_pageReport_a_complaint_date_of_incedence_3 = QtWidgets.QDateEdit(self.pageVacationNotice)
        self.date_pageReport_a_complaint_date_of_incedence_3.setGeometry(QtCore.QRect(450, 110, 211, 31))
        self.date_pageReport_a_complaint_date_of_incedence_3.setStyleSheet("border-radius: 4px;\n"
"border: 2px solid black;\n"
"padding-left:10px;")
        self.date_pageReport_a_complaint_date_of_incedence_3.setObjectName("date_pageReport_a_complaint_date_of_incedence_3")
        self.label_47 = QtWidgets.QLabel(self.pageVacationNotice)
        self.label_47.setGeometry(QtCore.QRect(260, 115, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_47.setFont(font)
        self.label_47.setStyleSheet("border-radius:7px;\n"
"")
        self.label_47.setObjectName("label_47")
        self.lbl_pageHomepage_welcomeUser_5 = QtWidgets.QLabel(self.pageVacationNotice)
        self.lbl_pageHomepage_welcomeUser_5.setGeometry(QtCore.QRect(50, 20, 821, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_5.setFont(font)
        self.lbl_pageHomepage_welcomeUser_5.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_5.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_5.setObjectName("lbl_pageHomepage_welcomeUser_5")
        self.led_LoginPage_Username_3 = QtWidgets.QLineEdit(self.pageVacationNotice)
        self.led_LoginPage_Username_3.setGeometry(QtCore.QRect(450, 350, 211, 31))
        self.led_LoginPage_Username_3.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_3.setObjectName("led_LoginPage_Username_3")
        self.label_49 = QtWidgets.QLabel(self.pageVacationNotice)
        self.label_49.setGeometry(QtCore.QRect(260, 360, 141, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_49.setFont(font)
        self.label_49.setStyleSheet("")
        self.label_49.setObjectName("label_49")
        self.btn_pageReportAComplaint_submitComplaint_3 = QtWidgets.QPushButton(self.pageVacationNotice)
        self.btn_pageReportAComplaint_submitComplaint_3.setGeometry(QtCore.QRect(380, 430, 171, 41))
        self.btn_pageReportAComplaint_submitComplaint_3.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_3.setObjectName("btn_pageReportAComplaint_submitComplaint_3")
        self.comboBox_5 = QtWidgets.QComboBox(self.pageVacationNotice)
        self.comboBox_5.setGeometry(QtCore.QRect(450, 280, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.comboBox_5.setFont(font)
        self.comboBox_5.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:20px;\n"
"border: 2px solid black;\n"
"border-radius: 10px;")
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.comboBox_5.addItem("")
        self.label_65 = QtWidgets.QLabel(self.pageVacationNotice)
        self.label_65.setGeometry(QtCore.QRect(260, 180, 151, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_65.setFont(font)
        self.label_65.setStyleSheet("")
        self.label_65.setObjectName("label_65")
        self.label_66 = QtWidgets.QLabel(self.pageVacationNotice)
        self.label_66.setGeometry(QtCore.QRect(260, 280, 171, 31))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_66.setFont(font)
        self.label_66.setStyleSheet("")
        self.label_66.setObjectName("label_66")
        self.comboBox_6 = QtWidgets.QComboBox(self.pageVacationNotice)
        self.comboBox_6.setGeometry(QtCore.QRect(450, 170, 211, 31))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.comboBox_6.setFont(font)
        self.comboBox_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"padding-left:20px;\n"
"border: 2px solid black;\n"
"border-radius: 10px;")
        self.comboBox_6.setObjectName("comboBox_6")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.comboBox_6.addItem("")
        self.label_67 = QtWidgets.QLabel(self.pageVacationNotice)
        self.label_67.setGeometry(QtCore.QRect(410, 240, 161, 21))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_67.setFont(font)
        self.label_67.setStyleSheet("")
        self.label_67.setObjectName("label_67")
        self.stackedWidget_2.addWidget(self.pageVacationNotice)
        self.pageViewproperties = QtWidgets.QWidget()
        self.pageViewproperties.setObjectName("pageViewproperties")
        self.lbl_pageHomepage_welcomeUser_10 = QtWidgets.QLabel(self.pageViewproperties)
        self.lbl_pageHomepage_welcomeUser_10.setGeometry(QtCore.QRect(0, 0, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_10.setFont(font)
        self.lbl_pageHomepage_welcomeUser_10.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_10.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_10.setObjectName("lbl_pageHomepage_welcomeUser_10")
        self.lbl_pageHomepage_welcomeUser_11 = QtWidgets.QLabel(self.pageViewproperties)
        self.lbl_pageHomepage_welcomeUser_11.setGeometry(QtCore.QRect(270, 80, 311, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_pageHomepage_welcomeUser_11.setFont(font)
        self.lbl_pageHomepage_welcomeUser_11.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_11.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_11.setObjectName("lbl_pageHomepage_welcomeUser_11")
        self.lbl_pageHomepage_welcomeUser_12 = QtWidgets.QLabel(self.pageViewproperties)
        self.lbl_pageHomepage_welcomeUser_12.setGeometry(QtCore.QRect(200, 130, 499, 281))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_12.setFont(font)
        self.lbl_pageHomepage_welcomeUser_12.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_12.setText("")
        self.lbl_pageHomepage_welcomeUser_12.setPixmap(QtGui.QPixmap(":/icons/icons/icons.png"))
        self.lbl_pageHomepage_welcomeUser_12.setScaledContents(True)
        self.lbl_pageHomepage_welcomeUser_12.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_12.setObjectName("lbl_pageHomepage_welcomeUser_12")
        self.btn_pageSignup_pagePassword_back_2 = QtWidgets.QPushButton(self.pageViewproperties)
        self.btn_pageSignup_pagePassword_back_2.setGeometry(QtCore.QRect(270, 430, 50, 50))
        self.btn_pageSignup_pagePassword_back_2.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"border-radius:6px;\n"
"")
        self.btn_pageSignup_pagePassword_back_2.setText("")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-back-to-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_pageSignup_pagePassword_back_2.setIcon(icon9)
        self.btn_pageSignup_pagePassword_back_2.setIconSize(QtCore.QSize(49, 49))
        self.btn_pageSignup_pagePassword_back_2.setObjectName("btn_pageSignup_pagePassword_back_2")
        self.btn_pageSignup_pagePassword_back_3 = QtWidgets.QPushButton(self.pageViewproperties)
        self.btn_pageSignup_pagePassword_back_3.setGeometry(QtCore.QRect(570, 430, 50, 50))
        self.btn_pageSignup_pagePassword_back_3.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"border-radius:6px;\n"
"")
        self.btn_pageSignup_pagePassword_back_3.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-next-page-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.btn_pageSignup_pagePassword_back_3.setIcon(icon10)
        self.btn_pageSignup_pagePassword_back_3.setIconSize(QtCore.QSize(49, 49))
        self.btn_pageSignup_pagePassword_back_3.setObjectName("btn_pageSignup_pagePassword_back_3")
        self.stackedWidget_2.addWidget(self.pageViewproperties)
        self.label_19 = QtWidgets.QLabel(self.pageHomepage)
        self.label_19.setGeometry(QtCore.QRect(40, -20, 151, 521))
        self.label_19.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0)")
        self.label_19.setText("")
        self.label_19.setObjectName("label_19")
        self.btn_pageHomepage_payRent = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_payRent.setGeometry(QtCore.QRect(30, 140, 181, 51))
        self.btn_pageHomepage_payRent.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 3px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_payRent.setObjectName("btn_pageHomepage_payRent")
        self.btn_pageHomepage_chat = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_chat.setGeometry(QtCore.QRect(30, 190, 181, 51))
        self.btn_pageHomepage_chat.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_chat.setObjectName("btn_pageHomepage_chat")
        self.btn_pageHomepage_reportacomplaint = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_reportacomplaint.setGeometry(QtCore.QRect(30, 240, 181, 51))
        self.btn_pageHomepage_reportacomplaint.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_reportacomplaint.setObjectName("btn_pageHomepage_reportacomplaint")
        self.btn_pageHomepage_checkAvailableProperties = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_checkAvailableProperties.setGeometry(QtCore.QRect(30, 390, 181, 51))
        self.btn_pageHomepage_checkAvailableProperties.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 3px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_checkAvailableProperties.setObjectName("btn_pageHomepage_checkAvailableProperties")
        self.btn_pageHomepage_logout = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_logout.setGeometry(QtCore.QRect(60, 450, 101, 41))
        self.btn_pageHomepage_logout.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageHomepage_logout.setObjectName("btn_pageHomepage_logout")
        self.btn_pageHomepage_reportacomplaint_2 = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_reportacomplaint_2.setGeometry(QtCore.QRect(30, 290, 181, 51))
        self.btn_pageHomepage_reportacomplaint_2.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_reportacomplaint_2.setObjectName("btn_pageHomepage_reportacomplaint_2")
        self.btn_pageHomepage_reportacomplaint_3 = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_reportacomplaint_3.setGeometry(QtCore.QRect(30, 340, 181, 51))
        self.btn_pageHomepage_reportacomplaint_3.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_reportacomplaint_3.setObjectName("btn_pageHomepage_reportacomplaint_3")
        self.label_52 = QtWidgets.QLabel(self.pageHomepage)
        self.label_52.setGeometry(QtCore.QRect(80, 10, 81, 81))
        self.label_52.setStyleSheet("background-color: rgb(0, 255, 0)")
        self.label_52.setText("")
        self.label_52.setPixmap(QtGui.QPixmap(":/icons/icons/user.png"))
        self.label_52.setScaledContents(True)
        self.label_52.setObjectName("label_52")
        self.btn_pageHomepage_payRent_4 = QtWidgets.QPushButton(self.pageHomepage)
        self.btn_pageHomepage_payRent_4.setGeometry(QtCore.QRect(30, 90, 181, 51))
        self.btn_pageHomepage_payRent_4.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_payRent_4.setObjectName("btn_pageHomepage_payRent_4")
        self.label_19.raise_()
        self.btn_pageHomepage_payRent.raise_()
        self.btn_pageHomepage_chat.raise_()
        self.btn_pageHomepage_reportacomplaint.raise_()
        self.btn_pageHomepage_checkAvailableProperties.raise_()
        self.btn_pageHomepage_logout.raise_()
        self.btn_pageHomepage_reportacomplaint_2.raise_()
        self.btn_pageHomepage_reportacomplaint_3.raise_()
        self.label_52.raise_()
        self.btn_pageHomepage_payRent_4.raise_()
        self.stackedWidget_2.raise_()
        self.stackedWidget.addWidget(self.pageHomepage)
        self.pageadmin = QtWidgets.QWidget()
        self.pageadmin.setObjectName("pageadmin")
        self.btn_pageHomepage_chat_2 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_chat_2.setGeometry(QtCore.QRect(30, 190, 181, 51))
        self.btn_pageHomepage_chat_2.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_chat_2.setObjectName("btn_pageHomepage_chat_2")
        self.btn_pageHomepage_checkAvailableProperties_2 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_checkAvailableProperties_2.setGeometry(QtCore.QRect(30, 390, 181, 51))
        self.btn_pageHomepage_checkAvailableProperties_2.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 3px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_checkAvailableProperties_2.setObjectName("btn_pageHomepage_checkAvailableProperties_2")
        self.btn_pageHomepage_payRent_2 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_payRent_2.setGeometry(QtCore.QRect(30, 140, 181, 51))
        self.btn_pageHomepage_payRent_2.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 3px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_payRent_2.setObjectName("btn_pageHomepage_payRent_2")
        self.label_32 = QtWidgets.QLabel(self.pageadmin)
        self.label_32.setGeometry(QtCore.QRect(80, 10, 81, 81))
        self.label_32.setStyleSheet("background-color: rgb(0, 255, 0)")
        self.label_32.setText("")
        self.label_32.setPixmap(QtGui.QPixmap(":/icons/icons/user.png"))
        self.label_32.setScaledContents(True)
        self.label_32.setObjectName("label_32")
        self.btn_pageHomepage_reportacomplaint_4 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_reportacomplaint_4.setGeometry(QtCore.QRect(30, 340, 181, 51))
        self.btn_pageHomepage_reportacomplaint_4.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_reportacomplaint_4.setObjectName("btn_pageHomepage_reportacomplaint_4")
        self.btn_pageHomepage_reportacomplaint_5 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_reportacomplaint_5.setGeometry(QtCore.QRect(30, 240, 181, 51))
        self.btn_pageHomepage_reportacomplaint_5.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_reportacomplaint_5.setObjectName("btn_pageHomepage_reportacomplaint_5")
        self.label_68 = QtWidgets.QLabel(self.pageadmin)
        self.label_68.setGeometry(QtCore.QRect(40, -10, 151, 521))
        self.label_68.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0)")
        self.label_68.setText("")
        self.label_68.setObjectName("label_68")
        self.btn_pageHomepage_reportacomplaint_6 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_reportacomplaint_6.setGeometry(QtCore.QRect(30, 290, 181, 51))
        self.btn_pageHomepage_reportacomplaint_6.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-top: 2px solid rgb(81, 81, 81);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_reportacomplaint_6.setObjectName("btn_pageHomepage_reportacomplaint_6")
        self.btn_pageHomepage_logout_2 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_logout_2.setGeometry(QtCore.QRect(60, 450, 101, 41))
        self.btn_pageHomepage_logout_2.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageHomepage_logout_2.setObjectName("btn_pageHomepage_logout_2")
        self.stackedWidget_3 = QtWidgets.QStackedWidget(self.pageadmin)
        self.stackedWidget_3.setGeometry(QtCore.QRect(190, 0, 871, 511))
        self.stackedWidget_3.setStyleSheet("background-color: rgb(91, 91, 91);")
        self.stackedWidget_3.setObjectName("stackedWidget_3")
        self.pageadminHomepage = QtWidgets.QWidget()
        self.pageadminHomepage.setObjectName("pageadminHomepage")
        self.toolButton_13 = QtWidgets.QToolButton(self.pageadminHomepage)
        self.toolButton_13.setGeometry(QtCore.QRect(640, 100, 201, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_13.setFont(font)
        self.toolButton_13.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(188, 2, 14);")
        self.toolButton_13.setIcon(icon5)
        self.toolButton_13.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_13.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_13.setObjectName("toolButton_13")
        self.toolButton_14 = QtWidgets.QToolButton(self.pageadminHomepage)
        self.toolButton_14.setGeometry(QtCore.QRect(640, 300, 211, 141))
        font = QtGui.QFont()
        font.setPointSize(13)
        self.toolButton_14.setFont(font)
        self.toolButton_14.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(41, 166, 18);")
        self.toolButton_14.setIcon(icon7)
        self.toolButton_14.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_14.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_14.setObjectName("toolButton_14")
        self.lbl_pageHomepage_welcomeUser_14 = QtWidgets.QLabel(self.pageadminHomepage)
        self.lbl_pageHomepage_welcomeUser_14.setGeometry(QtCore.QRect(0, 0, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(36)
        self.lbl_pageHomepage_welcomeUser_14.setFont(font)
        self.lbl_pageHomepage_welcomeUser_14.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color: rgb(255, 255, 255);")
        self.lbl_pageHomepage_welcomeUser_14.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_14.setObjectName("lbl_pageHomepage_welcomeUser_14")
        self.toolButton_15 = QtWidgets.QToolButton(self.pageadminHomepage)
        self.toolButton_15.setGeometry(QtCore.QRect(350, 300, 211, 141))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.toolButton_15.setFont(font)
        self.toolButton_15.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(126, 126, 126);")
        self.toolButton_15.setIcon(icon6)
        self.toolButton_15.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_15.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_15.setObjectName("toolButton_15")
        self.toolButton_16 = QtWidgets.QToolButton(self.pageadminHomepage)
        self.toolButton_16.setGeometry(QtCore.QRect(350, 100, 211, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_16.setFont(font)
        self.toolButton_16.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(26, 29, 166);")
        self.toolButton_16.setIcon(icon3)
        self.toolButton_16.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_16.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_16.setObjectName("toolButton_16")
        self.toolButton_17 = QtWidgets.QToolButton(self.pageadminHomepage)
        self.toolButton_17.setGeometry(QtCore.QRect(40, 100, 201, 141))
        font = QtGui.QFont()
        font.setPointSize(18)
        self.toolButton_17.setFont(font)
        self.toolButton_17.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(41, 166, 18);")
        self.toolButton_17.setIcon(icon2)
        self.toolButton_17.setIconSize(QtCore.QSize(80, 80))
        self.toolButton_17.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_17.setObjectName("toolButton_17")
        self.toolButton_18 = QtWidgets.QToolButton(self.pageadminHomepage)
        self.toolButton_18.setGeometry(QtCore.QRect(40, 300, 201, 141))
        font = QtGui.QFont()
        font.setPointSize(13)
        font.setBold(False)
        font.setWeight(50)
        self.toolButton_18.setFont(font)
        self.toolButton_18.setStyleSheet("border-radius:8px;\n"
"background-color: rgb(197, 200, 11);")
        self.toolButton_18.setIcon(icon4)
        self.toolButton_18.setIconSize(QtCore.QSize(110, 110))
        self.toolButton_18.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolButton_18.setObjectName("toolButton_18")
        self.stackedWidget_3.addWidget(self.pageadminHomepage)
        self.pageadminverifyrent = QtWidgets.QWidget()
        self.pageadminverifyrent.setObjectName("pageadminverifyrent")
        self.lbl_pageHomepage_welcomeUser_15 = QtWidgets.QLabel(self.pageadminverifyrent)
        self.lbl_pageHomepage_welcomeUser_15.setGeometry(QtCore.QRect(0, 0, 871, 61))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_15.setFont(font)
        self.lbl_pageHomepage_welcomeUser_15.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_15.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_15.setObjectName("lbl_pageHomepage_welcomeUser_15")
        self.btn_pageReportAComplaint_submitComplaint_7 = QtWidgets.QPushButton(self.pageadminverifyrent)
        self.btn_pageReportAComplaint_submitComplaint_7.setGeometry(QtCore.QRect(190, 130, 91, 31))
        self.btn_pageReportAComplaint_submitComplaint_7.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_7.setObjectName("btn_pageReportAComplaint_submitComplaint_7")
        self.led_LoginPage_Username_6 = QtWidgets.QLineEdit(self.pageadminverifyrent)
        self.led_LoginPage_Username_6.setGeometry(QtCore.QRect(50, 130, 131, 31))
        self.led_LoginPage_Username_6.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_6.setObjectName("led_LoginPage_Username_6")
        self.btn_pageHomepage_logout_3 = QtWidgets.QPushButton(self.pageadminverifyrent)
        self.btn_pageHomepage_logout_3.setGeometry(QtCore.QRect(290, 130, 91, 31))
        self.btn_pageHomepage_logout_3.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageHomepage_logout_3.setObjectName("btn_pageHomepage_logout_3")
        self.led_LoginPage_Username_7 = QtWidgets.QLineEdit(self.pageadminverifyrent)
        self.led_LoginPage_Username_7.setGeometry(QtCore.QRect(500, 190, 251, 31))
        self.led_LoginPage_Username_7.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_7.setObjectName("led_LoginPage_Username_7")
        self.pushButton = QtWidgets.QPushButton(self.pageadminverifyrent)
        self.pushButton.setGeometry(QtCore.QRect(770, 190, 51, 31))
        self.pushButton.setStyleSheet("background-color:transparent;\n"
"border: 2px solid transparent;")
        self.pushButton.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/icons/icons/icons8-search-100.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.pushButton.setIcon(icon11)
        self.pushButton.setIconSize(QtCore.QSize(35, 35))
        self.pushButton.setObjectName("pushButton")
        self.tableWidget = QtWidgets.QTableWidget(self.pageadminverifyrent)
        self.tableWidget.setGeometry(QtCore.QRect(40, 230, 791, 251))
        self.tableWidget.setStyleSheet("background-color: rgb(172, 172, 172);")
        self.tableWidget.setAlternatingRowColors(True)
        self.tableWidget.setRowCount(10)
        self.tableWidget.setColumnCount(8)
        self.tableWidget.setObjectName("tableWidget")
        self.layoutWidget_2 = QtWidgets.QWidget(self.pageadminverifyrent)
        self.layoutWidget_2.setGeometry(QtCore.QRect(50, 190, 327, 31))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.radioButton_4 = QtWidgets.QRadioButton(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_4.setFont(font)
        self.radioButton_4.setChecked(True)
        self.radioButton_4.setObjectName("radioButton_4")
        self.horizontalLayout_3.addWidget(self.radioButton_4)
        self.radioButton_3 = QtWidgets.QRadioButton(self.layoutWidget_2)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_3.setFont(font)
        self.radioButton_3.setChecked(False)
        self.radioButton_3.setObjectName("radioButton_3")
        self.horizontalLayout_3.addWidget(self.radioButton_3)
        self.btn_pageReportAComplaint_submitComplaint_11 = QtWidgets.QPushButton(self.pageadminverifyrent)
        self.btn_pageReportAComplaint_submitComplaint_11.setGeometry(QtCore.QRect(500, 140, 171, 31))
        self.btn_pageReportAComplaint_submitComplaint_11.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:5px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_11.setObjectName("btn_pageReportAComplaint_submitComplaint_11")
        self.btn_pageHomepage_logout_4 = QtWidgets.QPushButton(self.pageadminverifyrent)
        self.btn_pageHomepage_logout_4.setGeometry(QtCore.QRect(690, 140, 141, 31))
        self.btn_pageHomepage_logout_4.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:5px\n"
"")
        self.btn_pageHomepage_logout_4.setObjectName("btn_pageHomepage_logout_4")
        self.led_LoginPage_Username_13 = QtWidgets.QLineEdit(self.pageadminverifyrent)
        self.led_LoginPage_Username_13.setGeometry(QtCore.QRect(500, 100, 161, 31))
        self.led_LoginPage_Username_13.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 5px;")
        self.led_LoginPage_Username_13.setObjectName("led_LoginPage_Username_13")
        self.lbl_pageHomepage_welcomeUser_19 = QtWidgets.QLabel(self.pageadminverifyrent)
        self.lbl_pageHomepage_welcomeUser_19.setGeometry(QtCore.QRect(0, 60, 381, 51))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_pageHomepage_welcomeUser_19.setFont(font)
        self.lbl_pageHomepage_welcomeUser_19.setStyleSheet("")
        self.lbl_pageHomepage_welcomeUser_19.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_19.setObjectName("lbl_pageHomepage_welcomeUser_19")
        self.led_LoginPage_Username_14 = QtWidgets.QLineEdit(self.pageadminverifyrent)
        self.led_LoginPage_Username_14.setGeometry(QtCore.QRect(690, 100, 141, 31))
        self.led_LoginPage_Username_14.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 5px;")
        self.led_LoginPage_Username_14.setObjectName("led_LoginPage_Username_14")
        self.lbl_pageHomepage_welcomeUser_20 = QtWidgets.QLabel(self.pageadminverifyrent)
        self.lbl_pageHomepage_welcomeUser_20.setGeometry(QtCore.QRect(500, 70, 331, 21))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.lbl_pageHomepage_welcomeUser_20.setFont(font)
        self.lbl_pageHomepage_welcomeUser_20.setStyleSheet("")
        self.lbl_pageHomepage_welcomeUser_20.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_20.setObjectName("lbl_pageHomepage_welcomeUser_20")
        self.stackedWidget_3.addWidget(self.pageadminverifyrent)
        self.pageadminrepairs = QtWidgets.QWidget()
        self.pageadminrepairs.setObjectName("pageadminrepairs")
        self.pushButton_2 = QtWidgets.QPushButton(self.pageadminrepairs)
        self.pushButton_2.setGeometry(QtCore.QRect(750, 130, 51, 31))
        self.pushButton_2.setStyleSheet("background-color:transparent;\n"
"border: 2px solid transparent;")
        self.pushButton_2.setText("")
        self.pushButton_2.setIcon(icon11)
        self.pushButton_2.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_2.setObjectName("pushButton_2")
        self.led_LoginPage_Username_8 = QtWidgets.QLineEdit(self.pageadminrepairs)
        self.led_LoginPage_Username_8.setGeometry(QtCore.QRect(60, 100, 171, 31))
        self.led_LoginPage_Username_8.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_8.setObjectName("led_LoginPage_Username_8")
        self.btn_pageReportAComplaint_submitComplaint_8 = QtWidgets.QPushButton(self.pageadminrepairs)
        self.btn_pageReportAComplaint_submitComplaint_8.setGeometry(QtCore.QRect(250, 100, 111, 31))
        self.btn_pageReportAComplaint_submitComplaint_8.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_8.setObjectName("btn_pageReportAComplaint_submitComplaint_8")
        self.tableWidget_2 = QtWidgets.QTableWidget(self.pageadminrepairs)
        self.tableWidget_2.setGeometry(QtCore.QRect(60, 200, 741, 281))
        self.tableWidget_2.setStyleSheet("background-color: rgb(172, 172, 172);")
        self.tableWidget_2.setAlternatingRowColors(True)
        self.tableWidget_2.setRowCount(10)
        self.tableWidget_2.setColumnCount(8)
        self.tableWidget_2.setObjectName("tableWidget_2")
        self.lbl_pageHomepage_welcomeUser_16 = QtWidgets.QLabel(self.pageadminrepairs)
        self.lbl_pageHomepage_welcomeUser_16.setGeometry(QtCore.QRect(0, 0, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_16.setFont(font)
        self.lbl_pageHomepage_welcomeUser_16.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_16.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_16.setObjectName("lbl_pageHomepage_welcomeUser_16")
        self.led_LoginPage_Username_9 = QtWidgets.QLineEdit(self.pageadminrepairs)
        self.led_LoginPage_Username_9.setGeometry(QtCore.QRect(570, 130, 171, 31))
        self.led_LoginPage_Username_9.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_9.setObjectName("led_LoginPage_Username_9")
        self.layoutWidget1 = QtWidgets.QWidget(self.pageadminrepairs)
        self.layoutWidget1.setGeometry(QtCore.QRect(60, 160, 287, 31))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.radioButton = QtWidgets.QRadioButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton.setFont(font)
        self.radioButton.setChecked(True)
        self.radioButton.setObjectName("radioButton")
        self.horizontalLayout_2.addWidget(self.radioButton)
        self.radioButton_2 = QtWidgets.QRadioButton(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_2.setFont(font)
        self.radioButton_2.setObjectName("radioButton_2")
        self.horizontalLayout_2.addWidget(self.radioButton_2)
        self.stackedWidget_3.addWidget(self.pageadminrepairs)
        self.pageAdminChat = QtWidgets.QWidget()
        self.pageAdminChat.setObjectName("pageAdminChat")
        self.ted_pageChat_chatbox_manager_2 = QtWidgets.QTextEdit(self.pageAdminChat)
        self.ted_pageChat_chatbox_manager_2.setGeometry(QtCore.QRect(200, 20, 641, 401))
        self.ted_pageChat_chatbox_manager_2.setStyleSheet("background-color: rgb(52, 52, 52);\n"
"border-radius: 8px;\n"
"color: rgb(255, 255, 255);")
        self.ted_pageChat_chatbox_manager_2.setObjectName("ted_pageChat_chatbox_manager_2")
        self.btn_pageChat_send_2 = QtWidgets.QPushButton(self.pageAdminChat)
        self.btn_pageChat_send_2.setGeometry(QtCore.QRect(738, 440, 71, 41))
        self.btn_pageChat_send_2.setStyleSheet("background-color: transparent;\n"
"border-radius: 4px")
        self.btn_pageChat_send_2.setIcon(icon8)
        self.btn_pageChat_send_2.setIconSize(QtCore.QSize(40, 40))
        self.btn_pageChat_send_2.setCheckable(False)
        self.btn_pageChat_send_2.setChecked(False)
        self.btn_pageChat_send_2.setAutoDefault(False)
        self.btn_pageChat_send_2.setObjectName("btn_pageChat_send_2")
        self.led_pageChat_message_2 = QtWidgets.QLineEdit(self.pageAdminChat)
        self.led_pageChat_message_2.setGeometry(QtCore.QRect(240, 440, 501, 41))
        self.led_pageChat_message_2.setStyleSheet("background-color: rgb(255, 255, 255);\n"
"border-radius: 8px")
        self.led_pageChat_message_2.setObjectName("led_pageChat_message_2")
        self.pushButton_5 = QtWidgets.QPushButton(self.pageAdminChat)
        self.pushButton_5.setGeometry(QtCore.QRect(150, 30, 51, 31))
        self.pushButton_5.setStyleSheet("background-color:transparent;\n"
"border: 2px solid transparent;")
        self.pushButton_5.setText("")
        self.pushButton_5.setIcon(icon11)
        self.pushButton_5.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_5.setObjectName("pushButton_5")
        self.led_LoginPage_Username_15 = QtWidgets.QLineEdit(self.pageAdminChat)
        self.led_LoginPage_Username_15.setGeometry(QtCore.QRect(10, 30, 141, 31))
        self.led_LoginPage_Username_15.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_15.setObjectName("led_LoginPage_Username_15")
        self.stackedWidget_3.addWidget(self.pageAdminChat)
        self.pageadminVacation = QtWidgets.QWidget()
        self.pageadminVacation.setObjectName("pageadminVacation")
        self.led_LoginPage_Username_10 = QtWidgets.QLineEdit(self.pageadminVacation)
        self.led_LoginPage_Username_10.setGeometry(QtCore.QRect(50, 90, 171, 31))
        self.led_LoginPage_Username_10.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_10.setObjectName("led_LoginPage_Username_10")
        self.pushButton_3 = QtWidgets.QPushButton(self.pageadminVacation)
        self.pushButton_3.setGeometry(QtCore.QRect(740, 90, 51, 31))
        self.pushButton_3.setStyleSheet("background-color:transparent;\n"
"border: 2px solid transparent;")
        self.pushButton_3.setText("")
        self.pushButton_3.setIcon(icon11)
        self.pushButton_3.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_3.setObjectName("pushButton_3")
        self.btn_pageReportAComplaint_submitComplaint_9 = QtWidgets.QPushButton(self.pageadminVacation)
        self.btn_pageReportAComplaint_submitComplaint_9.setGeometry(QtCore.QRect(250, 90, 111, 31))
        self.btn_pageReportAComplaint_submitComplaint_9.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:10px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_9.setObjectName("btn_pageReportAComplaint_submitComplaint_9")
        self.tableWidget_3 = QtWidgets.QTableWidget(self.pageadminVacation)
        self.tableWidget_3.setGeometry(QtCore.QRect(50, 180, 741, 281))
        self.tableWidget_3.setStyleSheet("background-color: rgb(172, 172, 172);")
        self.tableWidget_3.setAlternatingRowColors(True)
        self.tableWidget_3.setRowCount(10)
        self.tableWidget_3.setColumnCount(8)
        self.tableWidget_3.setObjectName("tableWidget_3")
        self.led_LoginPage_Username_11 = QtWidgets.QLineEdit(self.pageadminVacation)
        self.led_LoginPage_Username_11.setGeometry(QtCore.QRect(560, 90, 171, 31))
        self.led_LoginPage_Username_11.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_11.setObjectName("led_LoginPage_Username_11")
        self.lbl_pageHomepage_welcomeUser_17 = QtWidgets.QLabel(self.pageadminVacation)
        self.lbl_pageHomepage_welcomeUser_17.setGeometry(QtCore.QRect(0, 0, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_17.setFont(font)
        self.lbl_pageHomepage_welcomeUser_17.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_17.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_17.setObjectName("lbl_pageHomepage_welcomeUser_17")
        self.layoutWidget_3 = QtWidgets.QWidget(self.pageadminVacation)
        self.layoutWidget_3.setGeometry(QtCore.QRect(50, 150, 305, 31))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.radioButton_5 = QtWidgets.QRadioButton(self.layoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_5.setFont(font)
        self.radioButton_5.setChecked(True)
        self.radioButton_5.setObjectName("radioButton_5")
        self.horizontalLayout_4.addWidget(self.radioButton_5)
        self.radioButton_6 = QtWidgets.QRadioButton(self.layoutWidget_3)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_6.setFont(font)
        self.radioButton_6.setObjectName("radioButton_6")
        self.horizontalLayout_4.addWidget(self.radioButton_6)
        self.stackedWidget_3.addWidget(self.pageadminVacation)
        self.pageComplaints = QtWidgets.QWidget()
        self.pageComplaints.setObjectName("pageComplaints")
        self.pushButton_4 = QtWidgets.QPushButton(self.pageComplaints)
        self.pushButton_4.setGeometry(QtCore.QRect(790, 130, 51, 31))
        self.pushButton_4.setStyleSheet("background-color:transparent;\n"
"border: 2px solid transparent;")
        self.pushButton_4.setText("")
        self.pushButton_4.setIcon(icon11)
        self.pushButton_4.setIconSize(QtCore.QSize(35, 35))
        self.pushButton_4.setObjectName("pushButton_4")
        self.radioButton_7 = QtWidgets.QRadioButton(self.pageComplaints)
        self.radioButton_7.setGeometry(QtCore.QRect(199, 5, 127, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.radioButton_7.setFont(font)
        self.radioButton_7.setObjectName("radioButton_7")
        self.tableWidget_4 = QtWidgets.QTableWidget(self.pageComplaints)
        self.tableWidget_4.setGeometry(QtCore.QRect(40, 200, 801, 281))
        self.tableWidget_4.setStyleSheet("background-color: rgb(172, 172, 172);")
        self.tableWidget_4.setAlternatingRowColors(True)
        self.tableWidget_4.setRowCount(10)
        self.tableWidget_4.setColumnCount(8)
        self.tableWidget_4.setObjectName("tableWidget_4")
        self.led_LoginPage_Username_12 = QtWidgets.QLineEdit(self.pageComplaints)
        self.led_LoginPage_Username_12.setGeometry(QtCore.QRect(550, 130, 231, 31))
        self.led_LoginPage_Username_12.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_12.setObjectName("led_LoginPage_Username_12")
        self.btn_pageReportAComplaint_submitComplaint_10 = QtWidgets.QPushButton(self.pageComplaints)
        self.btn_pageReportAComplaint_submitComplaint_10.setGeometry(QtCore.QRect(230, 140, 111, 31))
        self.btn_pageReportAComplaint_submitComplaint_10.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:5px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_10.setObjectName("btn_pageReportAComplaint_submitComplaint_10")
        self.lbl_pageHomepage_welcomeUser_18 = QtWidgets.QLabel(self.pageComplaints)
        self.lbl_pageHomepage_welcomeUser_18.setGeometry(QtCore.QRect(0, 0, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_18.setFont(font)
        self.lbl_pageHomepage_welcomeUser_18.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_18.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_18.setObjectName("lbl_pageHomepage_welcomeUser_18")
        self.comboBox_3 = QtWidgets.QComboBox(self.pageComplaints)
        self.comboBox_3.setGeometry(QtCore.QRect(50, 140, 141, 31))
        self.comboBox_3.setStyleSheet("border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 5px;")
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.comboBox_3.addItem("")
        self.label_50 = QtWidgets.QLabel(self.pageComplaints)
        self.label_50.setGeometry(QtCore.QRect(50, 90, 191, 41))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.label_50.setFont(font)
        self.label_50.setStyleSheet("")
        self.label_50.setObjectName("label_50")
        self.pushButton_4.raise_()
        self.radioButton_7.raise_()
        self.tableWidget_4.raise_()
        self.led_LoginPage_Username_12.raise_()
        self.btn_pageReportAComplaint_submitComplaint_10.raise_()
        self.lbl_pageHomepage_welcomeUser_18.raise_()
        self.label_50.raise_()
        self.comboBox_3.raise_()
        self.stackedWidget_3.addWidget(self.pageComplaints)
        self.pageAddproperty = QtWidgets.QWidget()
        self.pageAddproperty.setObjectName("pageAddproperty")
        self.lbl_pageHomepage_welcomeUser_21 = QtWidgets.QLabel(self.pageAddproperty)
        self.lbl_pageHomepage_welcomeUser_21.setGeometry(QtCore.QRect(0, 0, 871, 71))
        font = QtGui.QFont()
        font.setPointSize(25)
        self.lbl_pageHomepage_welcomeUser_21.setFont(font)
        self.lbl_pageHomepage_welcomeUser_21.setStyleSheet("background-color: rgb(113, 113, 113);\n"
"color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_21.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_21.setObjectName("lbl_pageHomepage_welcomeUser_21")
        self.btn_pageReportAComplaint_submitComplaint_12 = QtWidgets.QPushButton(self.pageAddproperty)
        self.btn_pageReportAComplaint_submitComplaint_12.setGeometry(QtCore.QRect(400, 200, 151, 31))
        self.btn_pageReportAComplaint_submitComplaint_12.setStyleSheet("background-color:rgb(67, 203, 99);\n"
"border-radius:5px\n"
"")
        self.btn_pageReportAComplaint_submitComplaint_12.setObjectName("btn_pageReportAComplaint_submitComplaint_12")
        self.led_LoginPage_Username_16 = QtWidgets.QLineEdit(self.pageAddproperty)
        self.led_LoginPage_Username_16.setGeometry(QtCore.QRect(240, 130, 171, 31))
        self.led_LoginPage_Username_16.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_16.setObjectName("led_LoginPage_Username_16")
        self.lbl_pageHomepage_welcomeUser_22 = QtWidgets.QLabel(self.pageAddproperty)
        self.lbl_pageHomepage_welcomeUser_22.setGeometry(QtCore.QRect(0, 70, 871, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lbl_pageHomepage_welcomeUser_22.setFont(font)
        self.lbl_pageHomepage_welcomeUser_22.setStyleSheet("color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_22.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_22.setObjectName("lbl_pageHomepage_welcomeUser_22")
        self.lbl_pageHomepage_welcomeUser_23 = QtWidgets.QLabel(self.pageAddproperty)
        self.lbl_pageHomepage_welcomeUser_23.setGeometry(QtCore.QRect(0, 260, 871, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lbl_pageHomepage_welcomeUser_23.setFont(font)
        self.lbl_pageHomepage_welcomeUser_23.setStyleSheet("color:rgb(22, 22, 22)")
        self.lbl_pageHomepage_welcomeUser_23.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_pageHomepage_welcomeUser_23.setObjectName("lbl_pageHomepage_welcomeUser_23")
        self.led_LoginPage_Username_17 = QtWidgets.QLineEdit(self.pageAddproperty)
        self.led_LoginPage_Username_17.setGeometry(QtCore.QRect(370, 350, 171, 31))
        self.led_LoginPage_Username_17.setStyleSheet("color: rgb(255, 255, 255);\n"
"border: 2px solid black;\n"
"padding-left:12px;\n"
"border-radius: 10px;")
        self.led_LoginPage_Username_17.setObjectName("led_LoginPage_Username_17")
        self.btn_pageHomepage_logout_5 = QtWidgets.QPushButton(self.pageAddproperty)
        self.btn_pageHomepage_logout_5.setGeometry(QtCore.QRect(410, 420, 101, 41))
        self.btn_pageHomepage_logout_5.setStyleSheet("background-color:rgb(255, 32, 43);\n"
"border-radius:10px\n"
"")
        self.btn_pageHomepage_logout_5.setObjectName("btn_pageHomepage_logout_5")
        self.btn_LoginPage_Login_2 = QtWidgets.QPushButton(self.pageAddproperty)
        self.btn_LoginPage_Login_2.setGeometry(QtCore.QRect(520, 130, 171, 31))
        self.btn_LoginPage_Login_2.setStyleSheet("QPushButton{\n"
"color: rgb(255, 255, 255);\n"
"background-color: rgb(6, 46, 175);\n"
"border-radius: 10px\n"
"}\n"
"\n"
"QPushButton:hover{\n"
"backgroundr:white;\n"
"\n"
"}\n"
"")
        self.btn_LoginPage_Login_2.setObjectName("btn_LoginPage_Login_2")
        self.stackedWidget_3.addWidget(self.pageAddproperty)
        self.btn_pageHomepage_payRent_3 = QtWidgets.QPushButton(self.pageadmin)
        self.btn_pageHomepage_payRent_3.setGeometry(QtCore.QRect(30, 90, 181, 51))
        self.btn_pageHomepage_payRent_3.setStyleSheet("border-radius:5px;\n"
"background-color: rgb(0, 255, 0);\n"
"border-bottom: 2px solid rgb(81, 81, 81)")
        self.btn_pageHomepage_payRent_3.setObjectName("btn_pageHomepage_payRent_3")
        self.label_68.raise_()
        self.btn_pageHomepage_chat_2.raise_()
        self.btn_pageHomepage_checkAvailableProperties_2.raise_()
        self.btn_pageHomepage_payRent_2.raise_()
        self.label_32.raise_()
        self.btn_pageHomepage_reportacomplaint_4.raise_()
        self.btn_pageHomepage_reportacomplaint_5.raise_()
        self.btn_pageHomepage_reportacomplaint_6.raise_()
        self.btn_pageHomepage_logout_2.raise_()
        self.btn_pageHomepage_payRent_3.raise_()
        self.stackedWidget_3.raise_()
        self.stackedWidget.addWidget(self.pageadmin)

        self.retranslateUi(Form)
        self.stackedWidget.setCurrentIndex(0)
        self.signUP.setCurrentIndex(0)
        self.stackedWidget_2.setCurrentIndex(0)
        self.stackedWidget_3.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Apartment Manager"))
        self.label_2.setText(_translate("Form", "USERNAME"))
        self.label_3.setText(_translate("Form", "PASSWORD"))
        self.label_5.setText(_translate("Form", "NEW USER?"))
        self.led_LoginPage_Username.setPlaceholderText(_translate("Form", "   ID number / Email address / House number / Phone number"))
        self.btn_LoginPage_Login.setText(_translate("Form", "LOG IN"))
        self.btn_LoginPage_Login.setShortcut(_translate("Form", "Return"))
        self.btn_LoginPage_ForgotPassword.setText(_translate("Form", "FORGOT PASSWORD"))
        self.btn_LoginPage_SignUp.setText(_translate("Form", "SIGN UP"))
        self.label_7.setText(_translate("Form", "SIGN UP"))
        self.lbl_pageSignUp_personalDetails.setText(_translate("Form", "Personal Details"))
        self.lbl_pageSignUp_nextofkin.setText(_translate("Form", "Next of kin"))
        self.label_8.setText(_translate("Form", "First Name *"))
        self.led_pageSignup_firstName.setPlaceholderText(_translate("Form", "John"))
        self.led_pageSignup_lastName.setPlaceholderText(_translate("Form", "Doe"))
        self.label_10.setText(_translate("Form", "Last Name *"))
        self.led_pageSignup_idNumber.setPlaceholderText(_translate("Form", "12345678"))
        self.label_9.setText(_translate("Form", "ID/Passport Number *"))
        self.led_pageSignup_emailAddress.setPlaceholderText(_translate("Form", "johndoe@abc.com"))
        self.label_11.setText(_translate("Form", "Email address *"))
        self.led_pageSignup_phoneNumber.setPlaceholderText(_translate("Form", "712345678"))
        self.label_12.setText(_translate("Form", "Phone Number *"))
        self.label_13.setText(_translate("Form", "+254"))
        self.label_14.setText(_translate("Form", "Occupation"))
        self.label_15.setText(_translate("Form", "Gender"))
        self.btn_pageSignup_personalDetailsNext.setText(_translate("Form", "NEXT"))
        self.led_pageSignup_occupation_2.setPlaceholderText(_translate("Form", "G11"))
        self.label_16.setText(_translate("Form", "House Number *"))
        self.led_pageSignup_occupation.setPlaceholderText(_translate("Form", "Accountant"))
        self.lbl_pageSignUp_nextofkin_2.setText(_translate("Form", "Next of kin"))
        self.label_18.setText(_translate("Form", "First Name *"))
        self.led_pageSignup_next_of_kinfirstName.setPlaceholderText(_translate("Form", "John"))
        self.label_20.setText(_translate("Form", "Last Name *"))
        self.led_pageSignup_next_of_kinLastName.setPlaceholderText(_translate("Form", "John"))
        self.label_25.setText(_translate("Form", "Email Address"))
        self.led_pageSignup_next_of_kinemailAddress.setPlaceholderText(_translate("Form", "mynextofkin@abc.com"))
        self.label_26.setText(_translate("Form", "Relationship"))
        self.led_pageSignup_next_of_kin_phoneNumber.setPlaceholderText(_translate("Form", "712345678"))
        self.label_27.setText(_translate("Form", "+254"))
        self.label_28.setText(_translate("Form", "Phone Number *"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(0, _translate("Form", "Father"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(1, _translate("Form", "Mother"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(2, _translate("Form", "Brother"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(3, _translate("Form", "Sister"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(4, _translate("Form", "Spouse"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(5, _translate("Form", "Child"))
        self.combo_pageSignup_next_of_kin_relationship.setItemText(6, _translate("Form", "Close relative"))
        self.btn_pageSignup_pageNexofKin_next.setText(_translate("Form", "Next"))
        self.led_pageSignup_next_of_kinAddress.setPlaceholderText(_translate("Form", "Donholm, Nairobi"))
        self.label_29.setText(_translate("Form", "Address"))
        self.btn_pageSignup_page_NextofKin_back.setText(_translate("Form", "Back"))
        self.label_21.setText(_translate("Form", "New Password"))
        self.btn_pageSignup_pagePassword_back.setText(_translate("Form", "Back"))
        self.lbl_pageSignUp_nextofkin_3.setText(_translate("Form", "Password"))
        self.btn_pageSignup_signUp.setText(_translate("Form", "Sign Up"))
        self.btn_pageSignup_signUp.setShortcut(_translate("Form", "Return"))
        self.led_pageSignup_newPassword.setPlaceholderText(_translate("Form", "mypassword"))
        self.label_31.setText(_translate("Form", "Repeat Password"))
        self.led_pageSignup_repeatPassword.setPlaceholderText(_translate("Form", "mypassword"))
        self.btn_PageSignUp_BacktoLogin.setText(_translate("Form", "Back to Login Page"))
        self.lbl_pageSignUp_password.setText(_translate("Form", "Password"))
        self.lbl_pageForgotPassword_email.setText(_translate("Form", "Enter your Email Address"))
        self.btn_pageForgotPassword_continue.setText(_translate("Form", "Continue"))
        self.led_pageForgotPassword_Username.setPlaceholderText(_translate("Form", "   abc@ayz.com"))
        self.btn_pageForgotPassword_BacktoLogin.setText(_translate("Form", "Back to Login"))
        self.label_24.setText(_translate("Form", "RESET PASSWORD"))
        self.btn_pageForgotPassword_verifyCode.setText(_translate("Form", "Verify code"))
        self.lbl_pageForgotPassword_verificationcode.setText(_translate("Form", "Enter verification code"))
        self.btn_pageForgotPassword_updatePassword.setText(_translate("Form", "Update Password"))
        self.btn_pageForgotPassword_updatePassword.setShortcut(_translate("Form", "Return"))
        self.lbl_pageHomepage_welcomeUser_2.setText(_translate("Form", "Welcome user"))
        self.toolButton.setText(_translate("Form", "Pay rent"))
        self.toolButton_2.setText(_translate("Form", "CHAT"))
        self.toolButton_3.setText(_translate("Form", "Schedule repairs"))
        self.toolButton_4.setText(_translate("Form", "Report complaint"))
        self.toolButton_5.setText(_translate("Form", "Vacate"))
        self.toolButton_6.setText(_translate("Form", "Available properties"))
        self.lbl_pageHomepage_welcomeUser_3.setText(_translate("Form", "SUBMIT A PAYMENT FOR VERIFICATION"))
        self.led_LoginPage_Username_2.setPlaceholderText(_translate("Form", "RBO7E35TAB"))
        self.label_40.setText(_translate("Form", "PAYMENT ID CODE"))
        self.label_41.setText(_translate("Form", "PAYMENT CHANNEL"))
        self.label_42.setText(_translate("Form", "DATE PAID"))
        self.label_43.setText(_translate("Form", "Payment Reason"))
        self.comboBox.setItemText(0, _translate("Form", "M-Pesa"))
        self.comboBox.setItemText(1, _translate("Form", "Equity Bank"))
        self.comboBox.setItemText(2, _translate("Form", "KCB Bank"))
        self.comboBox.setItemText(3, _translate("Form", "Co-operative Bank"))
        self.dateEdit.setDisplayFormat(_translate("Form", "yyyy MMMM dd"))
        self.comboBox_2.setItemText(0, _translate("Form", "Rent"))
        self.comboBox_2.setItemText(1, _translate("Form", "Repairs"))
        self.comboBox_2.setItemText(2, _translate("Form", "Water"))
        self.comboBox_2.setItemText(3, _translate("Form", "Arreas"))
        self.comboBox_2.setItemText(4, _translate("Form", "Other"))
        self.btn_pageForgotPassword_updatePassword_2.setText(_translate("Form", "Submit"))
        self.btn_pageForgotPassword_updatePassword_2.setShortcut(_translate("Form", "Return"))
        self.label_51.setText(_translate("Form", "Amount"))
        self.led_LoginPage_Username_4.setPlaceholderText(_translate("Form", "7000"))
        self.btn_pageChat_send.setShortcut(_translate("Form", "Return"))
        self.btn_pageChat_chatWithManager.setText(_translate("Form", "Chat with Manager"))
        self.btn_pageChat_chatWithOwner.setText(_translate("Form", "Chat with Owner"))
        self.label_35.setText(_translate("Form", "Date of incidence"))
        self.date_pageReport_a_complaint_date_of_incedence.setDisplayFormat(_translate("Form", "yyyy MMMM dd"))
        self.label_36.setText(_translate("Form", "Category of complaint"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(0, _translate("Form", "Noise"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(1, _translate("Form", "Payments"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(2, _translate("Form", "Maintenance and Repairs"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(3, _translate("Form", "House Hygene"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(4, _translate("Form", "Water"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(5, _translate("Form", "Electricity"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(6, _translate("Form", "Other tenants/Neighbours"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(7, _translate("Form", "House Management"))
        self.combo_pageReportAComplaint_category_of_complaint.setItemText(8, _translate("Form", "Other"))
        self.label_37.setText(_translate("Form", "Describe Complaint"))
        self.label_38.setText(_translate("Form", "REPORT A COMPLAINT"))
        self.btn_pageReportAComplaint_backToHomepage.setText(_translate("Form", "Back to homepage"))
        self.btn_pageReportAComplaint_submitComplaint.setText(_translate("Form", "SUBMIT COMPLAINT"))
        self.btn_pageReportAComplaint_submitComplaint.setShortcut(_translate("Form", "Return"))
        self.lbl_pageHomepage_welcomeUser_4.setText(_translate("Form", "SCHEDULE REPAIRS"))
        self.label_44.setText(_translate("Form", "Brief description of the damage"))
        self.label_45.setText(_translate("Form", "Category of Repair"))
        self.combo_pageReportAComplaint_category_of_complaint_2.setItemText(0, _translate("Form", "Electricity"))
        self.combo_pageReportAComplaint_category_of_complaint_2.setItemText(1, _translate("Form", "Plumbing (Taps, pipes and sinks)"))
        self.combo_pageReportAComplaint_category_of_complaint_2.setItemText(2, _translate("Form", "Walls and paintjob"))
        self.combo_pageReportAComplaint_category_of_complaint_2.setItemText(3, _translate("Form", "Internet"))
        self.combo_pageReportAComplaint_category_of_complaint_2.setItemText(4, _translate("Form", "Furniture (Cabinets and closets)"))
        self.combo_pageReportAComplaint_category_of_complaint_2.setItemText(5, _translate("Form", "Other"))
        self.btn_pageReportAComplaint_submitComplaint_2.setText(_translate("Form", "Schedule repair"))
        self.btn_pageReportAComplaint_submitComplaint_2.setShortcut(_translate("Form", "Return"))
        self.date_pageReport_a_complaint_date_of_incedence_2.setDisplayFormat(_translate("Form", "yyyy MMMM dd"))
        self.label_46.setText(_translate("Form", "Date you are free for \n"
"repairs to take place"))
        self.date_pageReport_a_complaint_date_of_incedence_3.setDisplayFormat(_translate("Form", "yyyy MMMM dd"))
        self.label_47.setText(_translate("Form", "Vacation Date*"))
        self.lbl_pageHomepage_welcomeUser_5.setText(_translate("Form", "Vacation Notice"))
        self.led_LoginPage_Username_3.setPlaceholderText(_translate("Form", "RBO7E35TAB"))
        self.label_49.setText(_translate("Form", "Account/phone number"))
        self.btn_pageReportAComplaint_submitComplaint_3.setText(_translate("Form", "Issue Notice"))
        self.btn_pageReportAComplaint_submitComplaint_3.setShortcut(_translate("Form", "Return"))
        self.comboBox_5.setItemText(0, _translate("Form", "M-Pesa"))
        self.comboBox_5.setItemText(1, _translate("Form", "Equity Bank"))
        self.comboBox_5.setItemText(2, _translate("Form", "KCB Bank"))
        self.comboBox_5.setItemText(3, _translate("Form", "Co-operative Bank"))
        self.label_65.setText(_translate("Form", "Reason for Vacation"))
        self.label_66.setText(_translate("Form", "PAYMENT CHANNEL"))
        self.comboBox_6.setItemText(0, _translate("Form", "Personal reasons"))
        self.comboBox_6.setItemText(1, _translate("Form", "Poor house management"))
        self.comboBox_6.setItemText(2, _translate("Form", "Cost"))
        self.comboBox_6.setItemText(3, _translate("Form", "Found a better place"))
        self.label_67.setText(_translate("Form", "For deposit reimbursement"))
        self.lbl_pageHomepage_welcomeUser_10.setText(_translate("Form", "CHECK PROPERTIES"))
        self.lbl_pageHomepage_welcomeUser_11.setText(_translate("Form", "HOUSE NUMBER"))
        self.btn_pageHomepage_payRent.setText(_translate("Form", "Payments"))
        self.btn_pageHomepage_chat.setText(_translate("Form", "Chat"))
        self.btn_pageHomepage_reportacomplaint.setText(_translate("Form", "Report a complaint"))
        self.btn_pageHomepage_checkAvailableProperties.setText(_translate("Form", "Check available properties"))
        self.btn_pageHomepage_logout.setText(_translate("Form", "LOGOUT"))
        self.btn_pageHomepage_reportacomplaint_2.setText(_translate("Form", "Schedule repairs"))
        self.btn_pageHomepage_reportacomplaint_3.setText(_translate("Form", "Issue vacation notice"))
        self.btn_pageHomepage_payRent_4.setText(_translate("Form", "Dashboard "))
        self.btn_pageHomepage_chat_2.setText(_translate("Form", "Chat"))
        self.btn_pageHomepage_checkAvailableProperties_2.setText(_translate("Form", "Update available properties"))
        self.btn_pageHomepage_payRent_2.setText(_translate("Form", "Payments"))
        self.btn_pageHomepage_reportacomplaint_4.setText(_translate("Form", "View issued vacation notices"))
        self.btn_pageHomepage_reportacomplaint_5.setText(_translate("Form", "View complaints"))
        self.btn_pageHomepage_reportacomplaint_6.setText(_translate("Form", "View requested repairs"))
        self.btn_pageHomepage_logout_2.setText(_translate("Form", "LOGOUT"))
        self.toolButton_13.setText(_translate("Form", "View complaints"))
        self.toolButton_14.setText(_translate("Form", "Update Available Properties"))
        self.lbl_pageHomepage_welcomeUser_14.setText(_translate("Form", "Welcome admin"))
        self.toolButton_15.setText(_translate("Form", "View vacation notices"))
        self.toolButton_16.setText(_translate("Form", "Chat"))
        self.toolButton_17.setText(_translate("Form", "Verify Payments"))
        self.toolButton_18.setText(_translate("Form", "View scheduled repairs"))
        self.lbl_pageHomepage_welcomeUser_15.setText(_translate("Form", "PAYMENTS"))
        self.btn_pageReportAComplaint_submitComplaint_7.setText(_translate("Form", "Mark as valid"))
        self.btn_pageReportAComplaint_submitComplaint_7.setShortcut(_translate("Form", "Return"))
        self.led_LoginPage_Username_6.setPlaceholderText(_translate("Form", "Enter payment ID"))
        self.btn_pageHomepage_logout_3.setText(_translate("Form", "Mark as invalid"))
        self.led_LoginPage_Username_7.setPlaceholderText(_translate("Form", "payment ID | Tenant name | House number"))
        self.radioButton_4.setText(_translate("Form", "View all payments"))
        self.radioButton_3.setText(_translate("Form", "View Unsorted payments only"))
        self.btn_pageReportAComplaint_submitComplaint_11.setText(_translate("Form", "Add amount to specified tenant"))
        self.btn_pageReportAComplaint_submitComplaint_11.setShortcut(_translate("Form", "Return"))
        self.btn_pageHomepage_logout_4.setText(_translate("Form", "Add amount to all tenants"))
        self.led_LoginPage_Username_13.setPlaceholderText(_translate("Form", "Enter House number"))
        self.lbl_pageHomepage_welcomeUser_19.setText(_translate("Form", "VERIFY PAYMENT"))
        self.led_LoginPage_Username_14.setPlaceholderText(_translate("Form", "Amount"))
        self.lbl_pageHomepage_welcomeUser_20.setText(_translate("Form", "ADD PAYMENT"))
        self.led_LoginPage_Username_8.setPlaceholderText(_translate("Form", "Enter request ID"))
        self.btn_pageReportAComplaint_submitComplaint_8.setText(_translate("Form", "Mark as sorted"))
        self.btn_pageReportAComplaint_submitComplaint_8.setShortcut(_translate("Form", "Return"))
        self.lbl_pageHomepage_welcomeUser_16.setText(_translate("Form", "REQUESTED REPAIRS"))
        self.led_LoginPage_Username_9.setPlaceholderText(_translate("Form", "Tenant name | House number"))
        self.radioButton.setText(_translate("Form", "View unsorted requests"))
        self.radioButton_2.setText(_translate("Form", "View all requests"))
        self.btn_pageChat_send_2.setShortcut(_translate("Form", "Return"))
        self.led_LoginPage_Username_15.setPlaceholderText(_translate("Form", "House number"))
        self.led_LoginPage_Username_10.setPlaceholderText(_translate("Form", "Enter vacation ID"))
        self.btn_pageReportAComplaint_submitComplaint_9.setText(_translate("Form", "Mark as sorted"))
        self.btn_pageReportAComplaint_submitComplaint_9.setShortcut(_translate("Form", "Return"))
        self.led_LoginPage_Username_11.setPlaceholderText(_translate("Form", "Tenant name | House number"))
        self.lbl_pageHomepage_welcomeUser_17.setText(_translate("Form", "VACATION NOTICES"))
        self.radioButton_5.setText(_translate("Form", "View unsorted notices only"))
        self.radioButton_6.setText(_translate("Form", "View all notices"))
        self.radioButton_7.setText(_translate("Form", "View all payments"))
        self.led_LoginPage_Username_12.setPlaceholderText(_translate("Form", "House number | Category"))
        self.btn_pageReportAComplaint_submitComplaint_10.setText(_translate("Form", "Reload"))
        self.btn_pageReportAComplaint_submitComplaint_10.setShortcut(_translate("Form", "Return"))
        self.lbl_pageHomepage_welcomeUser_18.setText(_translate("Form", "VIEW COMPLAINTS"))
        self.comboBox_3.setItemText(0, _translate("Form", "Date"))
        self.comboBox_3.setItemText(1, _translate("Form", "Category"))
        self.comboBox_3.setItemText(2, _translate("Form", "House_number"))
        self.label_50.setText(_translate("Form", "     Sort By"))
        self.lbl_pageHomepage_welcomeUser_21.setText(_translate("Form", "PROPERTY MANAGEMENT"))
        self.btn_pageReportAComplaint_submitComplaint_12.setText(_translate("Form", "Add Property as Available"))
        self.btn_pageReportAComplaint_submitComplaint_12.setShortcut(_translate("Form", "Return"))
        self.led_LoginPage_Username_16.setPlaceholderText(_translate("Form", "Enter House number"))
        self.lbl_pageHomepage_welcomeUser_22.setText(_translate("Form", "Add property"))
        self.lbl_pageHomepage_welcomeUser_23.setText(_translate("Form", "Delete Property From Available "))
        self.led_LoginPage_Username_17.setPlaceholderText(_translate("Form", "Enter House number"))
        self.btn_pageHomepage_logout_5.setText(_translate("Form", "Remove"))
        self.btn_LoginPage_Login_2.setText(_translate("Form", "Select Image to Upload"))
        self.btn_LoginPage_Login_2.setShortcut(_translate("Form", "Return"))
        self.btn_pageHomepage_payRent_3.setText(_translate("Form", "Dashboard "))

        # Mambo yangu

        # from PyQt5 import QtCore, QtGui, QtWidgets
        # from PyQt5.QtGui import QTextCursor
        # from PyQt5.QtWidgets import QMessageBox
        # from PyQt5.QtCore import QThread, pyqtSignal
        # import mysql.connector
        # import random
        # import smtplib
        # from datetime import datetime
        # import re
        # import time as sleeptime

        self.db = mysql.connector.connect(
                user="root",
                host="localhost",
                password="root")

        self.mycursor = self.db.cursor()

        self.led_LoginPage_Password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.reset_password_step = 0
        # Hide signup page widgets
        self.btn_pageForgotPassword_updatePassword.hide()
        self.btn_pageForgotPassword_verifyCode.hide()
        self.led_pageForgotPassword_newpassword.hide()
        self.led_pageForgotPassword_confirmPassword.hide()
        self.led_pageForgotPassword_verificationCode.hide()
        self.lbl_pageForgotPassword_verificationcode.hide()
        self.led_pageForgotPassword_confirmPassword.setEchoMode(QtWidgets.QLineEdit.Password)
        self.led_pageForgotPassword_newpassword.setEchoMode(QtWidgets.QLineEdit.Password)

        self.btn_LoginPage_Login.clicked.connect(lambda: self.loginpage_btnlogin())
        self.btn_LoginPage_SignUp.clicked.connect(lambda: self.to_pageSignup())
        self.btn_LoginPage_ForgotPassword.clicked.connect(lambda: self.to_pageForgotpassword())
        self.btn_pageHomepage_logout.clicked.connect(lambda: self.to_pageLogin())
        self.btn_pageForgotPassword_BacktoLogin.clicked.connect(lambda: self.button_pageForgotPassword_BacktoLogin())
        self.btn_PageSignUp_BacktoLogin.clicked.connect(lambda: self.to_pageLogin())
        self.led_LoginPage_Username.editingFinished.connect(self.led_authentic_username)
        self.led_pageForgotPassword_newpassword.editingFinished.connect(self.goodpass)

        self.btn_pageForgotPassword_continue.clicked.connect(self.button_continue)
        self.btn_pageForgotPassword_verifyCode.clicked.connect(self.button_verifyCode)
        self.btn_pageForgotPassword_updatePassword.clicked.connect(self.button_forgotpassword_updatepassword)

        # self.btn_pageSignup_personalDetailsNext.clicked.connect(self.next_signup_page)
        self.btn_pageSignup_pageNexofKin_next.clicked.connect(self.btn_pageSignup_pageNexofKin_next_clicked)
        self.btn_pageSignup_pagePassword_back.clicked.connect(self.btn_pageSignup_pagePassword_back_clicked)
        self.btn_pageSignup_page_NextofKin_back.clicked.connect(self.btn_pageSignup_page_NextofKin_back_clicked)

        self.btn_pageHomepage_chat.clicked.connect(self.btn_pageHomepage_chat_clicked)
        self.btn_pageHomepage_reportacomplaint.clicked.connect(self.btn_pageHomepage_reportacomplaint_clicked)
        self.btn_pageReportAComplaint_backToHomepage.clicked.connect(
                self.btn_pageReportAComplaint_backToHomepage_clicked)
        # self.thread = threading.Thread(target=self.update_messages, daemon=True)
        # self.start_thread = False

        # Registration

        self.edited_FirstName_signup = False
        self.edited_LastName_signup = False
        self.edited_email_signup = False
        self.edited_idNumber_signup = False
        self.edited_phoneNumber_signup = False
        self.edited_houseNumber_signup = False
        self.edited_NOK_FirstName_signup = False
        self.edited_NOK_LastName_signup = False
        self.edited_NOK_email_signup = False
        self.edited_NOK_phoneNumber_signup = False

        self.led_pageSignup_firstName.editingFinished.connect(self.led_pageSignup_firstName_edit)
        self.led_pageSignup_lastName.editingFinished.connect(self.led_pageSignup_lastName_edit)
        self.led_pageSignup_idNumber.editingFinished.connect(self.led_pageSignup_idNumber_edit)
        self.led_pageSignup_phoneNumber.editingFinished.connect(self.led_pageSignup_phoneNumber_edit)
        self.led_pageSignup_emailAddress.editingFinished.connect(self.led_pageSignup_emailAddress_edit)
        self.led_pageSignup_occupation_2.editingFinished.connect(self.led_pageSignup_occupation_2_edit)
        self.btn_pageSignup_personalDetailsNext.clicked.connect(self.btn_pageSignup_personalDetailsNext_clicked)
        self.led_pageSignup_next_of_kinfirstName.editingFinished.connect(self.led_pageSignup_next_of_kinfirstName_edit)
        self.led_pageSignup_next_of_kinLastName.editingFinished.connect(self.led_pageSignup_next_of_kinLastName_edit)
        self.led_pageSignup_next_of_kinemailAddress.editingFinished.connect(
                self.led_pageSignup_next_of_kinemailAddress_edit)
        self.led_pageSignup_next_of_kin_phoneNumber.editingFinished.connect(
                self.led_pageSignup_next_of_kin_phoneNumber_edit)
        self.btn_pageSignup_signUp.clicked.connect(self.btn_pageSignup_signUp_clicked)
        self.led_pageSignup_newPassword.editingFinished.connect(self.led_pageSignup_newPassword_edit)
        self.led_pageSignup_repeatPassword.editingFinished.connect(self.led_pageSignup_repeatPassword_edit)
        self.btn_pageChat_chatWithManager.clicked.connect(self.btn_pageChat_chatWithManager_clicked)
        self.btn_pageChat_chatWithOwner.clicked.connect(self.btn_pageChat_chatWithOwner_clicked)
        self.btn_pageChat_send.clicked.connect(self.btn_pageChat_send_clicked)
        self.date_pageReport_a_complaint_date_of_incedence.setDate(QtCore.QDate.currentDate())
        self.btn_pageReportAComplaint_submitComplaint.clicked.connect(
                self.btn_pageReportAComplaint_submitComplaint_clicked)


        self.previous_manager_display_message = " "
        self.previous_owner_display_message = " "
        self.previous_user = ""
        self.login_sessin = 0
        self.current_sending_to = "MANAGER"

        self.toolButton_4.clicked.connect(self.btn_pageHomepage_reportacomplaint_clicked)
        self.toolButton.clicked.connect(self.toolButton_clicked)
        self.btn_pageHomepage_payRent.clicked.connect(self.toolButton_clicked)
        self.dateEdit.setDate(QtCore.QDate.currentDate())
        self.btn_pageForgotPassword_updatePassword_2.clicked.connect(self.btn_pageForgotPassword_updatePassword_2_clicked)
        self.toolButton_2.clicked.connect(self.btn_pageHomepage_chat_clicked)
        self.btn_pageHomepage_reportacomplaint_2.clicked.connect(self.btn_pageHomepage_reportacomplaint_2_clicked)
        self.toolButton_3.clicked.connect(self.btn_pageHomepage_reportacomplaint_2_clicked)
        self.btn_pageReportAComplaint_submitComplaint_2.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_2_clickedd)
        self.date_pageReport_a_complaint_date_of_incedence_2.setDate(QtCore.QDate.currentDate())
        self.btn_pageHomepage_reportacomplaint_3.clicked.connect(self.btn_pageHomepage_reportacomplaint_3_clicked)
        self.toolButton_5.clicked.connect(self.btn_pageHomepage_reportacomplaint_3_clicked)
        self.btn_pageHomepage_checkAvailableProperties.clicked.connect(self.btn_pageHomepage_checkAvailableProperties_clicked)
        self.toolButton_6.clicked.connect(self.btn_pageHomepage_checkAvailableProperties_clicked)
        self.date_pageReport_a_complaint_date_of_incedence_3.setDate(QtCore.QDate.currentDate())
        self.btn_pageReportAComplaint_submitComplaint_3.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_3_clicked)
        self.current_property_id = 1
        self.btn_pageSignup_pagePassword_back_3.clicked.connect(self.btn_pageSignup_pagePassword_back_3_clicked)
        self.btn_pageSignup_pagePassword_back_2.clicked.connect(self.btn_pageSignup_pagePassword_back_2_clicked)
        self.btn_pageHomepage_logout_2.clicked.connect(self.btn_pageHomepage_logout_2_clicked)
        self.btn_pageHomepage_payRent_2.clicked.connect(self.btn_pageHomepage_payRent_2_clicked)
        self.toolButton_17.clicked.connect(self.btn_pageHomepage_payRent_2_clicked)
        self.radioButton_3.toggled.connect(self.radioButton_3_togled)
        self.btn_pageReportAComplaint_submitComplaint_7.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_7_clicked)
        self.btn_pageHomepage_logout_3.clicked.connect(self.btn_pageHomepage_logout_3_clicked)
        self.pushButton.clicked.connect(self.pushButton_clicked)
        self.btn_pageHomepage_reportacomplaint_5.clicked.connect(self.btn_pageHomepage_reportacomplaint_5_clicked)
        self.toolButton_13.clicked.connect(self.btn_pageHomepage_reportacomplaint_5_clicked)
        self.btn_pageReportAComplaint_submitComplaint_10.clicked.connect(self.btn_pageHomepage_reportacomplaint_5_clicked)
        self.pushButton_4.clicked.connect(self.pushButton_4_clicked)
        self.btn_pageHomepage_payRent_3.clicked.connect(self.btn_pageHomepage_payRent_3_click)
        self.btn_pageHomepage_payRent_4.clicked.connect(self.btn_pageHomepage_payRent_4_click)
        self.btn_pageReportAComplaint_submitComplaint_11.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_11_clicked)
        self.btn_pageHomepage_logout_4.clicked.connect(self.btn_pageHomepage_logout_4_clicked)
        self.toolButton_18.clicked.connect(self.toolButton_18_clicked)
        self.btn_pageHomepage_reportacomplaint_6.clicked.connect(self.toolButton_18_clicked)
        self.radioButton.toggled.connect(self.radioButtonx_togled)
        self.btn_pageReportAComplaint_submitComplaint_8.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_8_clicked)
        self.pushButton_2.clicked.connect(self.pushButton_2_clicked)
        self.btn_pageHomepage_reportacomplaint_4.clicked.connect(self.btn_pageHomepage_reportacomplaint_4_clicked)
        self.toolButton_15.clicked.connect(self.btn_pageHomepage_reportacomplaint_4_clicked)
        self.radioButton_5.toggled.connect(self.radioButton_5_tt)
        self.btn_pageReportAComplaint_submitComplaint_9.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_9_clicked)
        self.toolButton_14.clicked.connect(self.toolButton_14_clicked)
        self.btn_pageHomepage_checkAvailableProperties_2.clicked.connect(self.toolButton_14_clicked)
        self.btn_LoginPage_Login_2.clicked.connect(self.btn_LoginPage_Login_2_clicked)
        self.filepath = 'NONE'
        self.btn_pageReportAComplaint_submitComplaint_12.clicked.connect(self.btn_pageReportAComplaint_submitComplaint_12_cll)
        self.btn_pageHomepage_logout_5.clicked.connect(self.btn_pageHomepage_logout_5_clicked)



    def btn_pageHomepage_logout_5_clicked(self):
        house = self.led_LoginPage_Username_17.text()
        if house == '':
                house_done = False
        else:
                house_done = True

        if (house_done is True):
                try:
                        self.mycursor.execute(f"DELETE FROM apartment_name.properties WHERE house_number = '{house}';")
                        self.db.commit()
                        warning = QMessageBox()
                        warning.setWindowTitle("Property Deleted")
                        warning.setIcon(QMessageBox.Information)
                        warning.setText(f"Property has been deleted successfully.")
                        x = warning.exec_()

                        self.led_LoginPage_Username_17.clear()

                except:

                        warning = QMessageBox()
                        warning.setWindowTitle("Error")
                        warning.setIcon(QMessageBox.Warning)
                        warning.setText(f"There was an error deleting the property\n Please try again.")
                        x = warning.exec_()
        else:

                warning = QMessageBox()
                warning.setWindowTitle("Error")
                warning.setIcon(QMessageBox.Warning)
                warning.setText(f"House number cannot be blank.")
                x = warning.exec_()

    def btn_pageReportAComplaint_submitComplaint_12_cll(self):
        house = self.led_LoginPage_Username_16.text()
        if house == '':
                house_done = False
        else:
                house_done = True

        if (house_done is True) and (self.filepath != 'NONE'):
                with open(self.filepath, 'rb') as f:
                        file_data = f.read()

                try:
                        query = "INSERT INTO apartment_name.properties(house_number, picture) VALUES (%s, %s)"
                        values = (house, file_data)
                        self.mycursor.execute(query, values)
                        self.db.commit()

                        warning = QMessageBox()
                        warning.setWindowTitle("Property updated")
                        warning.setIcon(QMessageBox.Information)
                        warning.setText(f"Property has been added successfully.")
                        x = warning.exec_()

                        self.filepath = 'NONE'
                        self.led_LoginPage_Username_16.clear()


                except:

                        warning = QMessageBox()
                        warning.setWindowTitle("Error")
                        warning.setIcon(QMessageBox.Warning)
                        warning.setText(f"There was an error updating the property\n Please try again.")
                        x = warning.exec_()

                self.filepath = 'NONE'
                self.led_LoginPage_Username_16.clear()

        elif house_done is False:
                warning = QMessageBox()
                warning.setWindowTitle("House number")
                warning.setIcon(QMessageBox.Warning)
                warning.setText(f"House number cannot be blank!.")
                x = warning.exec_()

        elif self.filepath == 'NONE':
                warning = QMessageBox()
                warning.setWindowTitle("File")
                warning.setIcon(QMessageBox.Warning)
                warning.setText(f"Please select a file.")
                x = warning.exec_()

    def btn_LoginPage_Login_2_clicked(self):
            fileDialog = QFileDialog()
            fileDialog.setNameFilter("Image files (*.jpg *.png)")
            self.filepath, _ = fileDialog.getOpenFileName(Form, "Select Property photo", "", "Image files (*.jpg *.png)")


    def toolButton_14_clicked(self):
            self.stackedWidget_3.setCurrentWidget(self.pageAddproperty)

    def btn_pageReportAComplaint_submitComplaint_9_clicked(self):
            id = self.led_LoginPage_Username_10.text()
            if id == '':
                    id_done = False
            else:
                    id_done = True

            if id_done is True:
                    try:
                            self.mycursor.execute(
                                    f'UPDATE apartment_name.vacate_notice SET sorted = "SORTED" WHERE vacation_id = "{id}";')
                            self.db.commit()

                            if self.radioButton_5.isChecked():
                                    self.radioButton_5_tt(True)
                            else:
                                    self.radioButton_5_tt(False)

                            warning = QMessageBox()
                            warning.setWindowTitle("Sorted")
                            warning.setIcon(QMessageBox.Information)
                            warning.setText(f"Vacation notice has been marked as sorted.")
                            x = warning.exec_()

                    except:
                            warning = QMessageBox()
                            warning.setWindowTitle("Error")
                            warning.setIcon(QMessageBox.Warning)
                            warning.setText(f"Invalid vacation ID.")
                            x = warning.exec_()
            else:
                    warning = QMessageBox()
                    warning.setWindowTitle("Error")
                    warning.setIcon(QMessageBox.Warning)
                    warning.setText(f"Vacation ID cannot be blank.")
                    x = warning.exec_()



    def radioButton_5_tt(self, checked):
            if checked:
                    self.tableWidget_3.setColumnCount(8)
                    header_labels = ['VACATION ID', 'HOUSE NUMBER', 'TENANTS NAME', 'VACATION DATE', 'REASON',
                                     'REIMURSEMENT CHANNEL', 'ACCOUNT NUMBER', 'SORTED| NOT SORTED']

                    self.tableWidget_3.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget_3.verticalHeader().setVisible(False)
                    self.tableWidget_3.setRowCount(0)

                    self.mycursor.execute(f"SELECT * FROM apartment_name.vacate_notice WHERE sorted = 'NOT SORTED';")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget_3.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget_3.setItem(row_number, column_number,
                                                               QtWidgets.QTableWidgetItem(str(data)))

            else:
                    self.btn_pageHomepage_reportacomplaint_4_clicked()
    def btn_pageHomepage_reportacomplaint_4_clicked(self):
            self.tableWidget_3.setColumnCount(8)
            header_labels = ['VACATION ID', 'HOUSE NUMBER', 'TENANTS NAME', 'VACATION DATE', 'REASON', 'REIMURSEMENT CHANNEL', 'ACCOUNT NUMBER', 'SORTED| NOT SORTED']

            self.tableWidget_3.setHorizontalHeaderLabels(header_labels)
            self.tableWidget_3.verticalHeader().setVisible(False)
            self.tableWidget_3.setRowCount(0)

            self.mycursor.execute(f"SELECT * FROM apartment_name.vacate_notice;")

            for row_number, row_data in enumerate(self.mycursor):
                    self.tableWidget_3.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                            self.tableWidget_3.setItem(row_number, column_number,
                                                       QtWidgets.QTableWidgetItem(str(data)))

            self.stackedWidget_3.setCurrentWidget(self.pageadminVacation)
    def pushButton_2_clicked(self):
            search = self.led_LoginPage_Username_9.text()

            if search == "":
                    search = "."
            if self.radioButton.isChecked() is True:
                    self.tableWidget_2.setColumnCount(7)
                    header_labels = ['REPAIR ID', 'HOUSE NUMBER', 'TENANTS NAME', 'CATEGORY', 'SCHEDULED DATE',
                                     'DESCRIPTION', 'SORTED/NOT SORTED']
                    self.tableWidget_2.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget_2.verticalHeader().setVisible(False)
                    self.tableWidget_2.setRowCount(0)

                    self.mycursor.execute(f"SELECT * FROM apartment_name.repairs WHERE (tenants_name REGEXP '{search}' "
                                          f"OR house_number REGEXP '{search}' OR category REGEXP '{search}') and  (sorted != 'SORTED');")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget_2.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget_2.setItem(row_number, column_number,
                                                               QtWidgets.QTableWidgetItem(str(data)))

                    self.tableWidget_2.setColumnWidth(5, 250)
            else:
                    self.tableWidget_2.setColumnCount(7)
                    header_labels = ['REPAIR ID', 'HOUSE NUMBER', 'TENANTS NAME', 'CATEGORY', 'SCHEDULED DATE',
                                     'DESCRIPTION', 'SORTED/NOT SORTED']
                    self.tableWidget_2.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget_2.verticalHeader().setVisible(False)
                    self.tableWidget_2.setRowCount(0)

                    self.mycursor.execute(f"SELECT * FROM apartment_name.repairs WHERE (tenants_name REGEXP '{search}' "
                                          f"OR house_number REGEXP '{search}' OR category REGEXP '{search}');")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget_2.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget_2.setItem(row_number, column_number,
                                                               QtWidgets.QTableWidgetItem(str(data)))

                    self.tableWidget_2.setColumnWidth(5, 250)


    def btn_pageReportAComplaint_submitComplaint_8_clicked(self):
        id = self.led_LoginPage_Username_8.text()
        if id == '':
                id_done = False
        else:
                id_done = True

        if id_done is True:
                try:
                        self.mycursor.execute(
                                f'UPDATE apartment_name.repairs SET sorted = "SORTED" WHERE repair_id = "{id}";')
                        self.db.commit()

                        if self.radioButton.isChecked():
                                self.radioButtonx_togled(True)
                        else:
                                self.radioButtonx_togled(False)


                        warning = QMessageBox()
                        warning.setWindowTitle("Sorted")
                        warning.setIcon(QMessageBox.Information)
                        warning.setText(f"Repair has been marked as sorted.")
                        x = warning.exec_()

                except:
                        warning = QMessageBox()
                        warning.setWindowTitle("Added")
                        warning.setIcon(QMessageBox.Warning)
                        warning.setText(f"ERROR. Please check your Repair ID")
                        x = warning.exec_()
        else:
                warning = QMessageBox()
                warning.setWindowTitle("Added")
                warning.setIcon(QMessageBox.Warning)
                warning.setText(f"Please enter a repair ID.")
                x = warning.exec_()

    def radioButtonx_togled(self, checked):
            if checked:
                    self.tableWidget_2.setColumnCount(7)
                    header_labels = ['REPAIR ID', 'HOUSE NUMBER', 'TENANTS NAME', 'CATEGORY', 'SCHEDULED DATE',
                                     'DESCRIPTION', 'SORTED/NOT SORTED']
                    self.tableWidget_2.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget_2.verticalHeader().setVisible(False)
                    self.tableWidget_2.setRowCount(0)

                    self.mycursor.execute(f"SELECT * FROM apartment_name.repairs WHERE sorted != 'SORTED';")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget_2.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget_2.setItem(row_number, column_number,
                                                               QtWidgets.QTableWidgetItem(str(data)))

                    self.tableWidget_2.setColumnWidth(5, 250)

            else:
                    self.toolButton_18_clicked()
    def toolButton_18_clicked(self):
        self.tableWidget_2.setColumnCount(7)
        header_labels = ['REPAIR ID', 'HOUSE NUMBER', 'TENANTS NAME', 'CATEGORY', 'SCHEDULED DATE', 'DESCRIPTION', 'SORTED/NOT SORTED']
        self.tableWidget_2.setHorizontalHeaderLabels(header_labels)
        self.tableWidget_2.verticalHeader().setVisible(False)
        self.tableWidget_2.setRowCount(0)

        self.mycursor.execute(f"SELECT * FROM apartment_name.repairs;")

        for row_number, row_data in enumerate(self.mycursor):
            self.tableWidget_2.insertRow(row_number)
            for column_number, data in enumerate(row_data):
                self.tableWidget_2.setItem(row_number, column_number,
                                         QtWidgets.QTableWidgetItem(str(data)))

        self.tableWidget_2.setColumnWidth(5, 250)

        self.stackedWidget_3.setCurrentWidget(self.pageadminrepairs)
    def btn_pageHomepage_logout_4_clicked(self):
        amount = self.led_LoginPage_Username_14.text()
        if amount != '':
            try:
                amount = float(amount)
                amount_done = True

            except:
                amount_done = False
        else:
            amount_done = False

        if amount_done is True:
                self.mycursor.execute("SELECT * FROM apartment_name.accounts;")
                acc = [i for i in self.mycursor]
                for i in acc:
                        house = i[0]
                        bal = int(i[1])
                        new_balance = bal + amount
                        self.mycursor.execute(
                                f'UPDATE apartment_name.accounts SET balance = "{new_balance}" WHERE house_number = "{house}";')
                        self.db.commit()

                warning = QMessageBox()
                warning.setWindowTitle("Added")
                warning.setIcon(QMessageBox.Information)
                warning.setText(f"Ksh {amount} added to all tenant's balance.")
                x = warning.exec_()
        else:
                warning = QMessageBox()
                warning.setWindowTitle("Added")
                warning.setIcon(QMessageBox.Warning)
                warning.setText(f"Please enter a valid amount.")
                x = warning.exec_()

    def btn_pageReportAComplaint_submitComplaint_11_clicked(self):
        house = self.led_LoginPage_Username_13.text()
        amount = self.led_LoginPage_Username_14.text()

        if house != '':
            house_done = True
        else:
            house_done = False


        if amount != '':
            try:
                amount = float(amount)
                amount_done = True

            except:
                amount_done = False
        else:
            amount_done = False

        if (house_done is True) and (amount_done is True):
            try:
                self.mycursor.execute(
                    f"SELECT balance FROM apartment_name.accounts WHERE house_number = '{house}';")
                balance = float([i for i in self.mycursor][0][0])
                new_balance = balance + amount

                self.mycursor.execute(f'UPDATE apartment_name.accounts SET balance = "{new_balance}" WHERE house_number = "{house}";')
                self.db.commit()

                warning = QMessageBox()
                warning.setWindowTitle("Added")
                warning.setIcon(QMessageBox.Information)
                warning.setText(f"Ksh {amount} added to tenant {house}'s balance.\n"
                                f"New balance: {new_balance}")
                x = warning.exec_()

                self.led_LoginPage_Username_13.clear()
                self.led_LoginPage_Username_14.clear()

            except:
                warning = QMessageBox()
                warning.setWindowTitle("Error")
                warning.setIcon(QMessageBox.Warning)
                warning.setText(f"Error adding balance. Please enter correct credentials")
                x = warning.exec_()

        elif house_done is False:
            warning = QMessageBox()
            warning.setWindowTitle("House Number")
            warning.setIcon(QMessageBox.Warning)
            warning.setText(f"Please enter a valid house number")
            x = warning.exec_()

        elif amount_done is False:
            warning = QMessageBox()
            warning.setWindowTitle("Amount")
            warning.setIcon(QMessageBox.Warning)
            warning.setText(f"Please enter valid amount")
            x = warning.exec_()

    def btn_pageHomepage_payRent_4_click(self):
        self.stackedWidget_2.setCurrentWidget(self.pageRealHomepage)

    def btn_pageHomepage_payRent_3_click(self):
        self.stackedWidget_3.setCurrentWidget(self.pageadminHomepage)
    def pushButton_4_clicked(self):
            search = self.led_LoginPage_Username_12.text()

            if search == "":
                    search = "."

            order_by_combo = self.comboBox_3.currentText()

            if order_by_combo == 'Date':
                    order_by = 'complaint_date_posted'
            elif order_by_combo == 'Category':
                    order_by = 'complaint_category'
            elif order_by_combo == 'House_number':
                    order_by = 'house_number'

            self.tableWidget_4.setColumnCount(7)
            header_labels = ["COMPLAINT ID", "DATE POSTED", "HOUSE NUMBER", "TENANT'S NAME", "DATE OF INCIDENCE",
                             'CATEGORY OF COMPLAINT', "DESCRIPTION"]
            self.tableWidget_4.setHorizontalHeaderLabels(header_labels)
            self.tableWidget_4.verticalHeader().setVisible(False)
            self.tableWidget_4.setRowCount(0)

            self.mycursor.execute(
                    f"SELECT * FROM apartment_name.complaints WHERE house_number REGEXP '{search}' OR tenants_name REGEXP '{search}' OR "
                    f"complaint_category REGEXP '{search}' ORDER BY {order_by};")

            for row_number, row_data in enumerate(self.mycursor):
                    self.tableWidget_4.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                            self.tableWidget_4.setItem(row_number, column_number,
                                                       QtWidgets.QTableWidgetItem(str(data)))

            self.tableWidget_4.setColumnWidth(6, 1000)
            self.tableWidget_4.setColumnWidth(5, 180)
            self.tableWidget_4.setColumnWidth(4, 180)
            self.tableWidget_4.setColumnWidth(1, 180)


    def btn_pageHomepage_reportacomplaint_5_clicked(self):
            order_by_combo = self.comboBox_3.currentText()

            if order_by_combo == 'Date':
                    order_by = 'complaint_date_posted'
            elif order_by_combo == 'Category':
                    order_by = 'complaint_category'
            elif order_by_combo == 'House_number':
                    order_by = 'house_number'

            self.tableWidget_4.setColumnCount(7)
            header_labels = ["COMPLAINT ID", "DATE POSTED", "HOUSE NUMBER", "TENANT'S NAME", "DATE OF INCIDENCE", 'CATEGORY OF COMPLAINT', "DESCRIPTION"]
            self.tableWidget_4.setHorizontalHeaderLabels(header_labels)
            self.tableWidget_4.verticalHeader().setVisible(False)
            self.tableWidget_4.setRowCount(0)

            self.mycursor.execute(f"SELECT * FROM apartment_name.complaints ORDER BY {order_by};")

            for row_number, row_data in enumerate(self.mycursor):
                    self.tableWidget_4.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                            self.tableWidget_4.setItem(row_number, column_number,
                                                     QtWidgets.QTableWidgetItem(str(data)))

            self.tableWidget_4.setColumnWidth(6, 1000)
            self.tableWidget_4.setColumnWidth(5, 180)
            self.tableWidget_4.setColumnWidth(4, 180)
            self.tableWidget_4.setColumnWidth(1, 180)




            self.stackedWidget_3.setCurrentWidget(self.pageComplaints)

    def pushButton_clicked(self):
            search = self.led_LoginPage_Username_7.text()

            if search == "":
                    search = "."
            if self.radioButton_3.isChecked() is True:
                    self.tableWidget.setColumnCount(12)
                    header_labels = ["PAYMENT ID", 'HOUSE NUMBER', "TENANT'S NAME", "PAYMENT'S REASON",
                                     'PAYMENT CODE',
                                     'PAYMENT METHOD',
                                     'AMOUNT PAID', 'DATE', 'VERIFIED|NOT VERIFIED', "VALID | INVALID",
                                     'BALANCE AFTER VERIFICATION', 'CURRENT BALANCE']
                    self.tableWidget.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget.verticalHeader().setVisible(False)
                    self.tableWidget.setRowCount(0)

                    self.mycursor.execute(f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                            f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                            f"balance_when_verified, b.balance FROM apartment_name.payments a "
                            f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number) "
                            f"WHERE (a.house_number REGEXP '{search}' OR "
                            f"tenants_name REGEXP '{search}' OR payment_id REGEXP '{search}') and "
                            f"(verified_Not_Verified = 'NOT VERIFIED');")
                    self.mycursor.execute(
                            f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                            f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                            f"balance_when_verified, b.balance FROM apartment_name.payments a "
                            f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number) "
                            f" WHERE (a.house_number REGEXP '{search}' OR "
                            f"tenants_name REGEXP '{search}' OR payment_id REGEXP '{search}');")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget.setItem(row_number, column_number,
                                                             QtWidgets.QTableWidgetItem(str(data)))

            else:
                    self.tableWidget.setColumnCount(12)
                    header_labels = ["PAYMENT ID", 'HOUSE NUMBER', "TENANT'S NAME", "PAYMENT'S REASON",
                                     'PAYMENT CODE',
                                     'PAYMENT METHOD',
                                     'AMOUNT PAID', 'DATE', 'VERIFIED|NOT VERIFIED', "VALID | INVALID",
                                     'BALANCE AFTER VERIFICATION', 'CURRENT BALANCE']
                    self.tableWidget.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget.verticalHeader().setVisible(False)
                    self.tableWidget.setRowCount(0)

                    self.mycursor.execute(
                            f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                            f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                            f"balance_when_verified, b.balance FROM apartment_name.payments a "
                            f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number) "
                            f" WHERE (a.house_number REGEXP '{search}' OR "
                            f"tenants_name REGEXP '{search}' OR payment_id REGEXP '{search}');")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget.setItem(row_number, column_number,
                                                             QtWidgets.QTableWidgetItem(str(data)))


    def btn_pageHomepage_logout_3_clicked(self):
            id = self.led_LoginPage_Username_6.text()
            try:
                    self.mycursor.execute(
                            f'SELECT verified_Not_Verified, house_number FROM apartment_name.payments WHERE payment_id = {id};')

                    v = [i for i in self.mycursor][0]

                    result = v[0]
                    house = v[1]
                    if result == "Not verified":
                            valid_id = True
                    else:
                            valid_id = False

                    self.mycursor.execute(
                            f"SELECT balance FROM apartment_name.accounts WHERE house_number = '{house}';")
                    balance = [i for i in self.mycursor][0][0]
            except:
                    valid_id = False

            if valid_id is True:
                    self.mycursor.execute(
                            f'UPDATE apartment_name.payments SET verified_Not_Verified = "Verified" WHERE (payment_id = {id});')
                    self.db.commit()
                    self.mycursor.execute(
                            f'UPDATE apartment_name.payments SET valid_invalid = "Not Valid" WHERE (payment_id = {id});')
                    self.db.commit()

                    self.mycursor.execute(
                            f'UPDATE apartment_name.payments SET balance_when_verified = "{balance}" WHERE (payment_id = {id});')
                    self.db.commit()

                    warning = QMessageBox()
                    warning.setWindowTitle("Verified as Valid")
                    warning.setIcon(QMessageBox.Information)
                    warning.setText("Record verified as Not Valid")
                    x = warning.exec_()

                    self.led_LoginPage_Username_6.clear()

                    if self.radioButton_3.isChecked() is True:
                            self.tableWidget.setColumnCount(12)
                            header_labels = ["PAYMENT ID", 'HOUSE NUMBER', "TENANT'S NAME", "PAYMENT'S REASON",
                                             'PAYMENT CODE',
                                             'PAYMENT METHOD',
                                             'AMOUNT PAID', 'DATE', 'VERIFIED|NOT VERIFIED', "VALID | INVALID",
                                             'BALANCE AFTER VERIFICATION', 'CURRENT BALANCE']
                            self.tableWidget.setHorizontalHeaderLabels(header_labels)
                            self.tableWidget.verticalHeader().setVisible(False)
                            self.tableWidget.setRowCount(0)

                            self.mycursor.execute(
                                    f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                                    f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                                    f"balance_when_verified, b.balance FROM apartment_name.payments a "
                                    f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number) "
                                    f"WHERE verified_Not_Verified = 'NOT VERIFIED';")

                            for row_number, row_data in enumerate(self.mycursor):
                                    self.tableWidget.insertRow(row_number)
                                    for column_number, data in enumerate(row_data):
                                            self.tableWidget.setItem(row_number, column_number,
                                                                     QtWidgets.QTableWidgetItem(str(data)))

                    else:
                            self.btn_pageHomepage_payRent_2_clicked()
                            self.led_LoginPage_Username_6.clear()


            else:
                    warning = QMessageBox()
                    warning.setWindowTitle("Invaid ID")
                    warning.setIcon(QMessageBox.Warning)
                    warning.setText("The payment ID is either invalid or \n"
                                    "has already been verified.")
                    x = warning.exec_()

            self.led_LoginPage_Username_6.clear()

    def btn_pageReportAComplaint_submitComplaint_7_clicked(self):
        id = self.led_LoginPage_Username_6.text()
        try:
                self.mycursor.execute(f'SELECT verified_Not_Verified, amount, house_number FROM apartment_name.payments WHERE payment_id = {id};')

                v = [i for i in self.mycursor][0]
                result = v[0]
                amount = float(v[1])
                house = v[2]

                if result == "Not verified":
                        valid_id = True
                else:
                        valid_id = False

                self.mycursor.execute(f"SELECT balance FROM apartment_name.accounts WHERE house_number = '{house}';")
                balance = float([i for i in self.mycursor][0][0])

                print(f"balance: {balance}")


        except:
                valid_id = False


        if valid_id is True:

                new_balance = balance - amount
                print(f"New Balance: {new_balance}")

                self.mycursor.execute(f'UPDATE apartment_name.payments SET verified_Not_Verified = "Verified" WHERE (payment_id = {id});')
                self.db.commit()
                self.mycursor.execute(f'UPDATE apartment_name.payments SET valid_invalid = "Valid" WHERE (payment_id = {id});')
                self.db.commit()
                self.mycursor.execute(
                        f'UPDATE apartment_name.payments SET balance_when_verified = {new_balance} WHERE (payment_id = {id});')
                self.db.commit()

                self.mycursor.execute(
                    f'UPDATE apartment_name.accounts SET balance = {new_balance} WHERE house_number = "{house}";')
                self.db.commit()

                warning = QMessageBox()
                warning.setWindowTitle("Verified as Valid")
                warning.setIcon(QMessageBox.Information)
                warning.setText("Record verified as valid")
                x = warning.exec_()

                if self.radioButton_3.isChecked() is True:
                        self.tableWidget.setColumnCount(12)
                        header_labels = ["PAYMENT ID", 'HOUSE NUMBER', "TENANT'S NAME", "PAYMENT'S REASON",
                                         'PAYMENT CODE',
                                         'PAYMENT METHOD',
                                         'AMOUNT PAID', 'DATE', 'VERIFIED|NOT VERIFIED', "VALID | INVALID",
                                         'BALANCE AFTER VERIFICATION', 'CURRENT BALANCE']
                        self.tableWidget.setHorizontalHeaderLabels(header_labels)
                        self.tableWidget.verticalHeader().setVisible(False)
                        self.tableWidget.setRowCount(0)

                        self.mycursor.execute(
                                f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                                f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                                f"balance_when_verified, b.balance FROM apartment_name.payments a "
                                f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number) "
                                f"WHERE verified_Not_Verified = 'NOT VERIFIED';")

                        for row_number, row_data in enumerate(self.mycursor):
                                self.tableWidget.insertRow(row_number)
                                for column_number, data in enumerate(row_data):
                                        self.tableWidget.setItem(row_number, column_number,
                                                                 QtWidgets.QTableWidgetItem(str(data)))

                else:
                        self.btn_pageHomepage_payRent_2_clicked()

        else:
                warning = QMessageBox()
                warning.setWindowTitle("Invaid ID")
                warning.setIcon(QMessageBox.Warning)
                warning.setText("The payment ID is either invalid or \n"
                                "has already been verified.")
                x = warning.exec_()

        self.led_LoginPage_Username_6.clear()

    def radioButton_3_togled(self, checked):
            if checked:
                    self.tableWidget.setColumnCount(12)
                    header_labels = ["PAYMENT ID", 'HOUSE NUMBER', "TENANT'S NAME", "PAYMENT'S REASON", 'PAYMENT CODE',
                                     'PAYMENT METHOD', 'AMOUNT PAID', 'DATE', 'VERIFIED|NOT VERIFIED',
                                     "VALID | INVALID", 'BALANCE AFTER VERIFICATION', 'CURRENT BALANCE']
                    self.tableWidget.setHorizontalHeaderLabels(header_labels)
                    self.tableWidget.verticalHeader().setVisible(False)
                    self.tableWidget.setRowCount(0)

                    self.mycursor.execute(f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                                          f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                                          f"balance_when_verified, b.balance FROM apartment_name.payments a "
                                          f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number) "
                                          f"WHERE verified_Not_Verified = 'NOT VERIFIED';")

                    for row_number, row_data in enumerate(self.mycursor):
                            self.tableWidget.insertRow(row_number)
                            for column_number, data in enumerate(row_data):
                                    self.tableWidget.setItem(row_number, column_number,
                                                             QtWidgets.QTableWidgetItem(str(data)))

            else:
                    self.btn_pageHomepage_payRent_2_clicked()
    def btn_pageHomepage_payRent_2_clicked(self):
            self.tableWidget.setColumnCount(12)
            header_labels = ["PAYMENT ID", 'HOUSE NUMBER', "TENANT'S NAME", "PAYMENT'S REASON", 'PAYMENT CODE', 'PAYMENT METHOD',
                             'AMOUNT PAID', 'DATE', 'VERIFIED|NOT VERIFIED', "VALID | INVALID", 'BALANCE AFTER VERIFICATION', 'CURRENT BALANCE']
            self.tableWidget.setHorizontalHeaderLabels(header_labels)
            self.tableWidget.verticalHeader().setVisible(False)
            self.tableWidget.setRowCount(0)

            self.mycursor.execute(f"SELECT payment_id, a.house_number, tenants_name, payment_reason, payment_code, "
                                  f"payment_method, amount, payment_date, verified_Not_Verified, valid_invalid,"
                                  f"balance_when_verified, b.balance FROM apartment_name.payments a "
                                  f"JOIN apartment_name.accounts b ON (a.house_number = b.house_number);")

            for row_number, row_data in enumerate(self.mycursor):
                    self.tableWidget.insertRow(row_number)
                    for column_number, data in enumerate(row_data):
                            self.tableWidget.setItem(row_number, column_number,
                                                                  QtWidgets.QTableWidgetItem(str(data)))

            self.stackedWidget_3.setCurrentWidget(self.pageadminverifyrent)
    def btn_pageHomepage_logout_2_clicked(self):
            self.stackedWidget.setCurrentWidget(self.PageLogin)
            self.stackedWidget_3.setCurrentWidget(self.pageadminHomepage)

    def btn_pageSignup_pagePassword_back_2_clicked(self):
            next_id = self.current_property_id - 1
            if next_id == 0:
                    self.current_property_id = self.property_count
            else:
                    self.current_property_id = next_id

            self.load_property()

    def btn_pageSignup_pagePassword_back_3_clicked(self):
            next_id = self.current_property_id + 1
            if next_id > self.property_count:
                    self.current_property_id = 1
            else:
                    self.current_property_id = next_id

            self.load_property()

    def load_property(self):
            try:
                    self.mycursor.execute(
                            f"SELECT house_number, picture FROM apartment_name.properties WHERE property_id = {self.current_property_id};")
                    result = [i for i in self.mycursor][0]
                    house_number = result[0]
                    image_data = result[1]

                    with open("myfile.png", "wb") as file:
                            file.write(image_data)

                    pixmap = QPixmap('myfile.png')
                    self.lbl_pageHomepage_welcomeUser_12.setPixmap(pixmap)
                    self.lbl_pageHomepage_welcomeUser_11.setText(f'House number: {house_number}')
            except:
                    self.lbl_pageHomepage_welcomeUser_12.setPixmap(QtGui.QPixmap(":/icons/icons/icons.png"))

                    self.lbl_pageHomepage_welcomeUser_11.setText(f'NO MORE AVAILABLE PROPERTY')




    def btn_pageReportAComplaint_submitComplaint_3_clicked(self):
        date = self.date_pageReport_a_complaint_date_of_incedence_3.date().toString('yyyy-MM-dd')
        reason = self.comboBox_6.currentText()
        channel = self.comboBox_5.currentText()
        number = self.led_LoginPage_Username_3.text()
        if number != "":
                try:
                        int(number)
                        num_done = True
                except:
                        num_done = False
        else:
                num_done = False

        if num_done is True:
                to_database = (self.session_user_housenumber, self.session_user_fullnames, date, reason, channel, number, 'NOT SORTED')

                self.mycursor.execute("INSERT INTO apartment_name.vacate_notice(house_number, tenants_name, vacation_date, reason, "
                                      "reimbursement_channel, account_number, sorted) VALUES (%s,%s,%s,%s,%s,%s,%s);", to_database)
                self.db.commit()
                warning = QMessageBox()
                warning.setWindowTitle("Done")
                warning.setIcon(QMessageBox.Information)
                warning.setText("Your vacation request has been submitted for review.")
                x = warning.exec_()
                self.stackedWidget_2.setCurrentWidget(self.pageRealHomepage)
                self.led_LoginPage_Username_3.clear()
                self.date_pageReport_a_complaint_date_of_incedence_3.setDate(QtCore.QDate.currentDate())


        else:
                warning = QMessageBox()
                warning.setWindowTitle("Done")
                warning.setIcon(QMessageBox.Warning)
                warning.setText("Please fill all required values correctly..")
                x = warning.exec_()

    def btn_pageHomepage_checkAvailableProperties_clicked(self):
            self.mycursor.execute("SELECT count(*) FROM apartment_name.properties;")
            self.property_count = [i for i in self.mycursor][0][0]
            self.current_property_id = 1

            self.load_property()
            self.stackedWidget_2.setCurrentWidget(self.pageViewproperties)

    def btn_pageHomepage_reportacomplaint_3_clicked(self):
            self.stackedWidget_2.setCurrentWidget(self.pageVacationNotice)

    def btn_pageReportAComplaint_submitComplaint_2_clickedd(self):
        category = self.combo_pageReportAComplaint_category_of_complaint_2.currentText()
        date = self.date_pageReport_a_complaint_date_of_incedence_2.date().toString('yyyy-MM-dd')
        description = self.ted_pageReportAComplaint_describeComplaint_2.toPlainText()
        if description != '':
                desc_done = True
        else:
                desc_done = False

        if desc_done is True:
            to_db = (self.session_user_housenumber, self.session_user_fullnames, category, date, description, "NOT SORTED")
            self.mycursor.execute("INSERT INTO apartment_name.repairs(house_number, tenants_name, category, scheduled_date, description, sorted)"
                                  " VALUES (%s,%s,%s,%s,%s,%s);", to_db)
            self.db.commit()

            warning = QMessageBox()
            warning.setWindowTitle("Success")
            warning.setIcon(QMessageBox.Information)
            warning.setText("Your repair has successfully been submitted for scheduling.")
            x = warning.exec_()

            self.combo_pageReportAComplaint_category_of_complaint_2.setCurrentIndex(0)
            self.ted_pageReportAComplaint_describeComplaint_2.clear()
            self.date_pageReport_a_complaint_date_of_incedence_2.setDate(QtCore.QDate.currentDate())


        else:
                warning = QMessageBox()
                warning.setWindowTitle("Blank description")
                warning.setIcon(QMessageBox.Information)
                warning.setText("Please provide a brief description of the issue to be fixed.")
                x = warning.exec_()

    def btn_pageHomepage_reportacomplaint_2_clicked(self):
            self.stackedWidget_2.setCurrentWidget(self.pageSchedulerepairs)
    def btn_pageForgotPassword_updatePassword_2_clicked(self):
        date = self.dateEdit.date().toString('yyyy-MM-dd')
        payment_code = self.led_LoginPage_Username_2.text()
        if payment_code != '':
                code_done = True
        else:
                code_done = False

        channel = self.comboBox.currentText()
        reason = self.comboBox_2.currentText()
        amount = self.led_LoginPage_Username_4.text()
        if amount != '':
                try:
                        float(amount)
                        amount_done = True
                except:
                        amount_done = False
        else:
                amount_done = False


        if (amount_done is True) and (code_done is True):

                to_db = (self.session_user_housenumber, self.session_user_fullnames, reason, payment_code, channel, amount, date, "Not verified", " ")

                self.mycursor.execute("INSERT INTO apartment_name.payments(house_number, tenants_name, payment_reason, "
                                      "payment_code, payment_method, amount, payment_date, verified_Not_Verified, valid_invalid) VALUES (%s, %s,%s,%s,%s,%s,%s,%s,%s);", to_db)
                self.db.commit()

                warning = QMessageBox()
                warning.setWindowTitle("Success")
                warning.setIcon(QMessageBox.Information)
                warning.setText("Your payment details have been submitted for review")
                x = warning.exec_()

                self.dateEdit.setDate(QtCore.QDate.currentDate())
                self.led_LoginPage_Username_4.clear()
                self.led_LoginPage_Username_2.clear()
                self.comboBox.setCurrentIndex(0)
                self.comboBox_2.setCurrentIndex(0)

        elif (code_done is False):
                warning = QMessageBox()
                warning.setWindowTitle("Code")
                warning.setIcon(QMessageBox.Warning)
                warning.setText("Code field cannot be blank")
                x = warning.exec_()
        elif (amount_done is False):
                warning = QMessageBox()
                warning.setWindowTitle("Success")
                warning.setIcon(QMessageBox.Warning)
                warning.setText("Amount field should be digits only and MUST not be blank.")
                x = warning.exec_()

    def toolButton_clicked(self):
            self.stackedWidget_2.setCurrentWidget(self.pagePayRent)
    def btn_pageReportAComplaint_submitComplaint_clicked(self):
        date = self.date_pageReport_a_complaint_date_of_incedence.date().toString('yyyy-MM-dd')
        category = self.combo_pageReportAComplaint_category_of_complaint.currentText()
        description = self.ted_pageReportAComplaint_describeComplaint.toPlainText()
        time_now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        house = self.session_user_housenumber
        user_id = self.session_user_id
        print(f"User_id: {user_id}\nDate_occured: {date}\n"
                  f"Category: {category}\nDescription: {description}\nNow: {time_now}")
        to_db = (time_now, house,self.session_user_fullnames, date, category, description)
        print(to_db)

        self.mycursor.execute('INSERT INTO apartment_name.complaints(complaint_date_posted, house_number, tenants_name, '
                              'date_of_incedence, complaint_category, complaint_description) VALUES (%s,%s,%s,%s,%s,%s);', to_db)
        self.db.commit()

        warning = QMessageBox()
        warning.setWindowTitle("Submitted")
        warning.setIcon(QMessageBox.Information)
        warning.setText("Complaint submitted successfully")
        x = warning.exec_()

        self.ted_pageReportAComplaint_describeComplaint.clear()
        self.combo_pageReportAComplaint_category_of_complaint.setCurrentIndex(0)


    def btn_pageChat_send_clicked(self):
            self.mycursor.execute(f"INSERT INTO apartment_name.messages(date_sent, sent_from, sent_to, message )"
                                  f" VALUES('{datetime.now().strftime('%Y-%m-%d %H:%M:%S')}', '{self.session_user_id}', "
                                  f"'{self.current_sending_to}', '{self.led_pageChat_message.text()}');")
            self.db.commit()

            self.led_pageChat_message.clear()

    def btn_pageChat_chatWithManager_clicked(self):
            self.ted_pageChat_chatbox_owner.hide()
            self.ted_pageChat_chatbox_manager.show()
            self.current_sending_to = "MANAGER"

    def btn_pageChat_chatWithOwner_clicked(self):
            self.ted_pageChat_chatbox_owner.show()
            self.ted_pageChat_chatbox_manager.hide()
            self.current_sending_to = "OWNER"

    def led_pageSignup_repeatPassword_edit(self):
            password_strength = self.is_strong_password(self.led_pageSignup_repeatPassword.text())

            font = QtGui.QFont()
            font.setFamily("MS Shell Dlg 2")
            font.setPointSize(8)
            self.lbl_pagePassword_RepeatPasswordNotification.setFont(font)

            if (self.led_pageSignup_repeatPassword.text() == self.led_pageSignup_newPassword.text()):
                    if password_strength is True:
                            self.led_pageSignup_repeatPassword.setStyleSheet("border: 2px solid rgb(0, 136, 0);"
                                                                             "border-radius: 10px;")
                            self.lbl_pagePassword_RepeatPasswordNotification.setText("")
            else:
                    self.lbl_pagePassword_RepeatPasswordNotification.setText("Password don't match")

    def btn_pageSignup_signUp_clicked(self):
            password_strength = self.is_strong_password(self.led_pageSignup_newPassword.text())

            font = QtGui.QFont()
            font.setFamily("MS Shell Dlg 2")
            font.setPointSize(9)

            self.lbl_pagePassword_NewpasswordNotification.setFont(font)

            if password_strength is True:
                    self.lbl_pageSignup_Fillall_Password_Notification.setText("")
                    self.signup_password = self.led_pageSignup_newPassword.text()

                    try:
                            self.mycursor.execute(f"INSERT INTO apartment_name.details"
                                                  f"(id_number, first_name, last_name, phone_number, email_address, "
                                                  f"house_number, date_of_commencing_tenancy, gender, occupation,next_of_kin_first_name, next_of_kin_last_name,"
                                                  f" next_of_kin_phone_number, next_of_kin_email_address,next_of_kin_relationship, "
                                                  f"next_of_kin_address) VALUES('{self.signup_idNumber}', '{self.signup_firstName}', "
                                                  f"'{self.signup_lastName}', '{self.signup_phoneNumber}', '{self.signup_emailAddress}', "
                                                  f"'{self.signup_housenumber}', '{datetime.now().strftime('%Y-%m-%d')}', '{self.signup_gender}', '{self.signup_occupation}', "
                                                  f"'{self.signup_NOK_firstName}', '{self.signup_NOK_lastName}', "
                                                  f"'{self.signup_NOK_phoneNumber}', '{self.signup_NOK_emailAddress}', "
                                                  f"'{self.signup_relationsip_NOK}', '{self.signup_address_NOK}');")
                            self.db.commit()

                            self.mycursor.execute(
                                    f"INSERT INTO apartment_name.tenants_logins(id_number, house_number, phone_number,email_address, "
                                    f"user_password, user) VALUES ('{self.signup_idNumber}', '{self.signup_housenumber}', "
                                    f"'{self.signup_phoneNumber}', '{self.signup_emailAddress}' , "
                                    f"'{self.signup_password}', 'TENANT');")
                            self.db.commit()
                            warning = QMessageBox()
                            warning.setWindowTitle("ACCOUNT CREATED SUCCESSFULLY")
                            warning.setIcon(QMessageBox.Information)
                            warning.setText("Your account was created successfully. \nPlease Login to use your account")
                            x = warning.exec_()

                            self.signUP.setCurrentWidget(self.pageSignUpPersonalDetails)
                            self.to_pageLogin()
                    except:
                            warning = QMessageBox()
                            warning.setWindowTitle("WARNING")
                            warning.setIcon(QMessageBox.Critical)
                            warning.setText("An error prevented your account from being created")
                            x = warning.exec_()
                            self.signUP.setCurrentWidget(self.pageSignUpPersonalDetails)

            else:
                    self.lbl_pageSignup_Fillall_Password_Notification.setText("Password doesn't meet requirments")
                    self.lbl_pageSignup_Fillall_Password_Notification.adjustSize()

    def led_pageSignup_newPassword_edit(self):
            self.lbl_pagePassword_NewpasswordNotification.setStyleSheet("color: rgb(229, 6, 28);")

            password_strength = self.is_strong_password(self.led_pageSignup_newPassword.text())

            if password_strength is True:
                    self.led_pageSignup_newPassword.setStyleSheet("border: 2px solid rgb(0, 136, 0);"
                                                                  "border-radius: 10px;")
                    self.lbl_pagePassword_NewpasswordNotification.setText("")

            else:

                    font = QtGui.QFont()
                    font.setFamily("MS Shell Dlg 2")
                    font.setPointSize(8)

                    self.lbl_pagePassword_NewpasswordNotification.setFont(font)
                    self.lbl_pagePassword_NewpasswordNotification.setStyleSheet("color: rgb(229, 6, 28);")

                    self.led_pageSignup_newPassword.setStyleSheet("border: 2px solid rgb(213, 5, 15);"
                                                                  "border-radius: 10px;")
                    self.lbl_pagePassword_NewpasswordNotification.setText(password_strength)
                    self.lbl_pagePassword_NewpasswordNotification.adjustSize()

    def is_strong_password(self, password):
            if len(password) < 8:
                    return "Password is short"

            # Password must contain at least one lowercase letter
            if not re.search(r"[a-z]", password):
                    return "Password must contain at least one lowercase letter"

            # Password must contain at least one uppercase letter
            if not re.search(r"[A-Z]", password):
                    return "Password must contain at least one uppercase letter"

            if not re.search(r"\d", password):
                    return "Password must contain at least one digit"

            if not re.search(r"[!@#$%^&*(),.?\":{}|<>]", password):
                    return "Password must contain at least one special character"

            return True

    def led_pageSignup_next_of_kin_phoneNumber_edit(self):
            edited_text = self.led_pageSignup_next_of_kin_phoneNumber.text()

            if edited_text != "":
                    try:
                            for i in edited_text:
                                    int(i)

                            if len(edited_text) == 9:
                                    self.edited_NOK_phoneNumber_signup = True
                                    self.led_pageSignup_next_of_kin_phoneNumber.setStyleSheet(
                                            "border:2px solid rgb(203, 203, 203);;"
                                            "border-bottom: 2px solid rgb(0, 136, 0)")
                                    self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setText("")

                                    self.signup_NOK_phoneNumber = "254" + edited_text

                            else:
                                    self.led_pageSignup_next_of_kin_phoneNumber.setStyleSheet(
                                            "border:2px solid rgb(203, 203, 203);;"
                                            "border-bottom: 2px solid rgb(255, 7, 11)")
                                    self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setText(
                                            "Number of digits is more/less than expected!")

                                    self.edited_NOK_phoneNumber_signup = False

                    except:
                            self.led_pageSignup_next_of_kin_phoneNumber.setStyleSheet(
                                    "border:2px solid rgb(203, 203, 203);;"
                                    "border-bottom: 2px solid rgb(255, 7, 11)")
                            self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setText(
                                    "Field should contain digits only")
                            self.edited_NOK_phoneNumber_signup = False


            else:
                    self.led_pageSignup_next_of_kin_phoneNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                              "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_NextofKin_PhoneNumberNotification.setText("Phone number cannot be blank!")
                    self.edited_NOK_phoneNumber_signup = False

    def led_pageSignup_next_of_kinemailAddress_edit(self):
            edited_text = self.led_pageSignup_next_of_kinemailAddress.text().strip().lower()
            valid_mail = self.is_valid_email(edited_text)

            if valid_mail is True:
                    self.edited_NOK_email_signup = True
                    self.led_pageSignup_next_of_kinemailAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                              "border-bottom: 2px solid rgb(0, 136, 0)")

                    self.signup_NOK_emailAddress = edited_text

            else:
                    self.led_pageSignup_next_of_kinemailAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                              "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.edited_NOK_email_signup = False
                    self.signup_NOK_emailAddress = "NOT STATED"

    def led_pageSignup_next_of_kinfirstName_edit(self):
            edited_text = self.led_pageSignup_next_of_kinfirstName.text().strip()

            if edited_text != "":
                    self.edited_NOK_FirstName_signup = True
                    self.led_pageSignup_next_of_kinfirstName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                           "border-bottom: 2px solid rgb(0, 136, 0)")
                    self.lbl_pageSignup_NextOfKin_FirstNameNotification.setText("")

                    self.signup_NOK_firstName = edited_text

            else:
                    self.led_pageSignup_next_of_kinfirstName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                           "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_NextOfKin_FirstNameNotification.setText("First name cannot be blank!")
                    self.edited_NOK_FirstName_signup = False

    def led_pageSignup_next_of_kinLastName_edit(self):
            edited_text = self.led_pageSignup_next_of_kinLastName.text().strip()

            if edited_text != "":
                    self.edited_NOK_LastName_signup = True
                    self.led_pageSignup_next_of_kinLastName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                          "border-bottom: 2px solid rgb(0, 136, 0)")
                    self.lbl_pageSignup_nextfKin_LastNameNotification.setText("")

                    self.signup_NOK_lastName = edited_text

            else:
                    self.led_pageSignup_next_of_kinLastName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                          "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_nextfKin_LastNameNotification.setText("First name cannot be blank!")
                    self.edited_NOK_LastName_signup = False

    def led_pageSignup_firstName_edit(self):
            edited_text = self.led_pageSignup_firstName.text().strip()

            if edited_text != "":
                    self.edited_FirstName_signup = True
                    self.led_pageSignup_firstName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                "border-bottom: 2px solid rgb(0, 136, 0)")
                    self.lbl_pageSignup_FirstNameNotification.setText("")

                    self.signup_firstName = edited_text

            else:
                    self.led_pageSignup_firstName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_FirstNameNotification.setText("First name cannot be blank!")
                    self.edited_FirstName_signup = False

    def led_pageSignup_lastName_edit(self):
            edited_text = self.led_pageSignup_lastName.text().strip()

            if edited_text != "":
                    self.edited_LastName_signup = True
                    self.led_pageSignup_lastName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                               "border-bottom: 2px solid rgb(0, 136, 0)")
                    self.lbl_pageSignup_lastNameNotification.setText("")
                    self.signup_lastName = edited_text


            else:
                    self.led_pageSignup_lastName.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                               "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_lastNameNotification.setText("Last name cannot be blank!")
                    self.edited_LastName_signup = False

    def led_pageSignup_idNumber_edit(self):
            edited_text = self.led_pageSignup_idNumber.text()

            if edited_text != "":
                    try:
                            for i in edited_text:
                                    int(i)

                            if len(edited_text) >= 8 and len(edited_text) <= 9:
                                    self.edited_idNumber_signup = True
                                    self.led_pageSignup_idNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                               "border-bottom: 2px solid rgb(0, 136, 0)")
                                    self.lbl_pageSignup_IDNumberNotification.setText("")

                                    self.signup_idNumber = edited_text

                            else:
                                    self.led_pageSignup_idNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                               "border-bottom: 2px solid rgb(255, 7, 11)")
                                    self.lbl_pageSignup_IDNumberNotification.setText(
                                            "Number of digits is more/less than expected!")

                                    self.edited_idNumber_signup = False

                    except:
                            self.led_pageSignup_idNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                       "border-bottom: 2px solid rgb(255, 7, 11)")
                            self.lbl_pageSignup_IDNumberNotification.setText("Field should contain digits only")
                            self.edited_idNumber_signup = False


            else:
                    self.led_pageSignup_idNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                               "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_IDNumberNotification.setText("ID/Passport number cannot be blank!")
                    self.edited_idNumber_signup = False

    def led_pageSignup_phoneNumber_edit(self):
            edited_text = self.led_pageSignup_phoneNumber.text()

            if edited_text != "":
                    try:
                            for i in edited_text:
                                    int(i)

                            if len(edited_text) == 9:
                                    self.edited_phoneNumber_signup = True
                                    self.led_pageSignup_phoneNumber.setStyleSheet(
                                            "border:2px solid rgb(203, 203, 203);;"
                                            "border-bottom: 2px solid rgb(0, 136, 0)")
                                    self.lbl_pageSignup_phoneNumberNotification.setText("")

                                    self.signup_phoneNumber = "254" + edited_text

                            else:
                                    self.led_pageSignup_phoneNumber.setStyleSheet(
                                            "border:2px solid rgb(203, 203, 203);;"
                                            "border-bottom: 2px solid rgb(255, 7, 11)")
                                    self.lbl_pageSignup_phoneNumberNotification.setText(
                                            "Number of digits is more/less than expected!")

                                    self.edited_phoneNumber_signup = False

                    except:
                            self.led_pageSignup_phoneNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                          "border-bottom: 2px solid rgb(255, 7, 11)")
                            self.lbl_pageSignup_phoneNumberNotification.setText("Field should contain digits only")
                            self.edited_phoneNumber_signup = False


            else:
                    self.led_pageSignup_phoneNumber.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                  "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_phoneNumberNotification.setText("Phone number cannot be blank!")
                    self.edited_phoneNumber_signup = False

    def is_valid_email(self, email_to_validate):
            if not email_to_validate:
                    return False

            pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'

            if re.match(pattern, email_to_validate):
                    return True
            else:
                    return False

    def led_pageSignup_emailAddress_edit(self):
            edited_text = self.led_pageSignup_emailAddress.text().strip().lower()
            valid_mail = self.is_valid_email(edited_text)

            if valid_mail is True:
                    self.edited_email_signup = True
                    self.led_pageSignup_emailAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                   "border-bottom: 2px solid rgb(0, 136, 0)")
                    self.lbl_pageSignup_emailNotification.setText("")

                    self.signup_emailAddress = edited_text

            else:
                    self.led_pageSignup_emailAddress.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                   "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_emailNotification.setText("Email address is invalid!")

                    self.edited_email_signup = False

    def led_pageSignup_occupation_2_edit(self):
            edited_text = self.led_pageSignup_occupation_2.text().strip()

            if edited_text != "":
                    self.edited_houseNumber_signup = True
                    self.led_pageSignup_occupation_2.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                   "border-bottom: 2px solid rgb(0, 136, 0)")
                    self.lbl_pageSignup_houseNumberNotification.setText("")
                    self.signup_housenumber = edited_text


            else:
                    self.led_pageSignup_occupation_2.setStyleSheet("border:2px solid rgb(203, 203, 203);;"
                                                                   "border-bottom: 2px solid rgb(255, 7, 11)")
                    self.lbl_pageSignup_houseNumberNotification.setText("House Number cannot be blank!")
                    self.edited_houseNumber_signup = False

    def btn_pageSignup_personalDetailsNext_clicked(self):
            self.signup_occupation = self.led_pageSignup_occupation.text()

            warning = QMessageBox()
            warning.setWindowTitle("WARNING")
            warning.setIcon(QMessageBox.Critical)
            if self.signup_occupation == "":
                    self.signup_occupation = "NOT STATED"

            if self.rbn_pageSignUp_male.isChecked():
                    self.signup_gender = "Male"
            if self.rbn_pageSignUp_female.isChecked():
                    self.signup_gender = "Female"

            if (self.edited_FirstName_signup is True) and (self.edited_LastName_signup is True) and \
                    (self.edited_idNumber_signup is True) and (self.edited_email_signup is True) and \
                    (self.edited_houseNumber_signup is True) and (self.edited_phoneNumber_signup is True):

                    self.mycursor.execute(f"SELECT COUNT(*) FROM apartment_name.details "
                                          f"WHERE id_number = '{self.signup_idNumber}'")
                    result = self.mycursor.fetchone()[0]

                    if result > 0:

                            warning.setText("ID Number entered is already linked to an account!")
                            x = warning.exec_()

                    else:
                            self.mycursor.execute(f"SELECT COUNT(*) FROM apartment_name.details "
                                                  f"WHERE email_address = '{self.signup_emailAddress}'")
                            result = self.mycursor.fetchone()[0]
                            if result > 0:
                                    warning.setText("Email Address entered is already linked to an account!")
                                    x = warning.exec_()
                            else:
                                    self.mycursor.execute(f"SELECT COUNT(*) FROM apartment_name.details "
                                                          f"WHERE phone_number = '254{self.signup_phoneNumber}'")
                                    result = self.mycursor.fetchone()[0]
                                    if result > 0:
                                            warning.setText("Phone Number entered is already linked to an account!")
                                            x = warning.exec_()
                                    else:
                                            self.mycursor.execute(f"SELECT COUNT(*) FROM apartment_name.details "
                                                                  f"WHERE house_number = '{self.signup_housenumber}'")
                                            result = self.mycursor.fetchone()[0]
                                            if result > 0:
                                                    warning.setText(
                                                            "House Number entered is already linked to an account!")
                                                    x = warning.exec_()
                                            else:
                                                    self.next_signup_page()
                                                    self.lbl_pageSignup_FillallNotification.setText("")

            else:
                    warning.setText("Enter all required fields with * appropriately")
                    x = warning.exec_()
                    self.lbl_pageSignup_FillallNotification.setText("Enter all required fields with *")
                    self.lbl_pageSignup_FillallNotification.adjustSize()

    def to_pageLogin(self):
            self.stackedWidget.setCurrentWidget(self.PageLogin)
            self.stackedWidget_2.setCurrentWidget(self.pageRealHomepage)
            self.login_sessin += 1

    def to_pageSignup(self):
            self.stackedWidget.setCurrentWidget(self.pageSignUp)

    def to_pageForgotpassword(self):
            self.stackedWidget.setCurrentWidget(self.pageForgotPassword)

    def to_pageHomepage(self):
            self.stackedWidget.setCurrentWidget(self.pageHomepage)

    def get_password(self, user):
            try:
                    self.mycursor.execute(
                            f"SELECT user_password FROM apartment_name.tenants_logins WHERE id_number = {user};")
                    password = self.mycursor.fetchall()[0][0]
                    self.session_user_id = user
                    return password
            except:
                    try:
                            self.mycursor.execute(
                                    f"SELECT user_password FROM apartment_name.tenants_logins WHERE house_number = '{user}';")
                            password = self.mycursor.fetchall()[0][0]

                            self.mycursor.execute(
                                    f"SELECT id_number FROM apartment_name.tenants_logins WHERE house_number = '{user}';")
                            self.session_user_id = self.mycursor.fetchall()[0][0]

                            return password
                    except:
                            try:
                                    self.mycursor.execute(
                                            f"SELECT user_password FROM apartment_name.tenants_logins WHERE phone_number = {user};")
                                    password = self.mycursor.fetchall()[0][0]

                                    self.mycursor.execute(
                                            f"SELECT id_number FROM apartment_name.tenants_logins WHERE phone_number = {user};")
                                    self.session_user_id = self.mycursor.fetchall()[0][0]

                                    return password
                            except:
                                    try:
                                            self.mycursor.execute(
                                                    f"SELECT user_password FROM apartment_name.tenants_logins WHERE email_address = '{user}';")

                                            password = self.mycursor.fetchall()[0][0]

                                            self.mycursor.execute(
                                                    f"SELECT id_number FROM apartment_name.tenants_logins WHERE email_address = '{user}';")

                                            self.session_user_id = self.mycursor.fetchall()[0][0]

                                            return password
                                    except:
                                            password = "None"
                                            return password

    def authentic_username(self, username):
            autenticity = self.get_password(username)
            if autenticity == "None":
                    return False
            else:
                    return True

    def led_authentic_username(self):
            is_username_authentic = self.authentic_username(self.led_LoginPage_Username.text())
            print(self.led_LoginPage_Username.text())
            print(is_username_authentic)

            if is_username_authentic is False:
                    self.led_LoginPage_Username.setStyleSheet("background-color: rgb(33, 33, 33);"
                                                              "color: rgb(255, 255, 255);"
                                                              "border: 2px solid red;"
                                                              "border-radius: 10px;")
                    self.lbl_pageLogin_username.setText("Username does not exist")
            else:
                    self.led_LoginPage_Username.setStyleSheet("background-color: rgb(33, 33, 33);"
                                                              "color: rgb(255, 255, 255);"
                                                              "border: 2px solid rgb(79, 223, 12);"
                                                              "border-radius: 10px;")
                    self.lbl_pageLogin_username.setText("")

    def loginpage_btnlogin(self):
            self.username = self.led_LoginPage_Username.text()
            print(self.username)
            self.entered_password = self.led_LoginPage_Password.text()

            self.user_password = self.get_password(self.username)

            if self.user_password == self.entered_password:
                    self.led_LoginPage_Password.setStyleSheet("background-color: rgb(33, 33, 33);"
                                                              "color: rgb(255, 255, 255);"
                                                              "border: 2px solid white;"
                                                              "border-radius: 10px;")
                    self.lbl_pageLogin_password.setText("")



                    self.mycursor.execute(
                            f"SELECT first_name, last_name, house_number FROM apartment_name.details WHERE id_number = '{self.session_user_id}';")
                    v = [i for i in self.mycursor][0]
                    self.session_user_firstName = v[0]

                    self.session_user_fullnames = f'{v[0]} {v[1]}'
                    self.session_user_housenumber = v[2]

                    self.mycursor.execute(f"SELECT user FROM apartment_name.tenants_logins WHERE id_number = '{self.session_user_id}';")
                    v = [i for i in self.mycursor][0]
                    user_ = v[0]

                    if user_ == "TENANT":
                        self.to_pageHomepage()

                        self.lbl_pageHomepage_welcomeUser_2.setText(f"Welcome {self.session_user_firstName}")

                        if self.login_sessin < 1:
                                self.owner_message_thread = OwnerMessageThread(self.session_user_id)
                                self.owner_message_thread.messages_updated.connect(self.update_owner_messages_textedit)
                                self.owner_message_thread.start()

                                self.manager_message_thread = ManagerMessageThread(self.session_user_id)
                                self.manager_message_thread.messages_updated.connect(self.update_manager_messages_textedit)
                                self.manager_message_thread.start()
                        else:
                                self.owner_message_thread.terminate()
                                self.owner_message_thread.wait()

                                self.manager_message_thread.terminate()
                                self.manager_message_thread.wait()
                                sleeptime.sleep(1)

                                self.owner_message_thread = OwnerMessageThread(self.session_user_id)
                                self.owner_message_thread.messages_updated.connect(self.update_owner_messages_textedit)
                                self.owner_message_thread.start()

                                self.manager_message_thread = ManagerMessageThread(self.session_user_id)
                                self.manager_message_thread.messages_updated.connect(self.update_manager_messages_textedit)
                                self.manager_message_thread.start()

                    elif user_ == "MANAGER":

                        self.lbl_pageHomepage_welcomeUser_14.setText(f"Welcome {self.session_user_firstName}")

                        self.stackedWidget.setCurrentWidget(self.pageadmin)
                        self.stackedWidget_3.setCurrentWidget(self.pageadminHomepage)



            else:
                        if self.user_password == "None":
                                self.lbl_pageLogin_password.setText("You entered a username that does not exist!")
                                self.lbl_pageLogin_password.adjustSize()

                        else:
                                self.led_LoginPage_Password.setStyleSheet("background-color: rgb(33, 33, 33);"
                                                                          "color: rgb(255, 255, 255);"
                                                                          "border: 2px solid red;"
                                                                          "border-radius: 10px;")
                                self.lbl_pageLogin_password.setText("Incorrect Password. Please try again!")
                                self.lbl_pageLogin_password.adjustSize()

    def led_authentic_username_forgotpassword(self):
            username = self.led_PageForgotPPassword_Username.text()
            legit = self.authentic_username(username)
            if legit is True:
                    self.lbl_resetPassword_usernameNotiication = QtWidgets.QLabel(self.pageForgotPassword)
                    self.lbl_resetPassword_usernameNotiication.setGeometry(QtCore.QRect(440, 100, 241, 31))
                    self.lbl_resetPassword_usernameNotiication.setStyleSheet("color:rgb(23, 255, 11);\n"
                                                                             "background-color: rgb(61, 61, 61);\n"
                                                                             "")
                    self.lbl_resetPassword_usernameNotiication.setObjectName("lbl_resetPassword_usernameNotiication")
                    self.lbl_resetPassword_usernameNotiication.setText("OTP code has been sent to your email address")

    def get_otp(self):
            otp = ""
            for i in range(6):
                    otp = otp + (str(random.randint(0, 9)))

            return otp

    def sendmail(self, send_email_address, firstName, otp):
            server = smtplib.SMTP('smtp.gmail.com', 587)
            email_password = "opmawjgeglznvoyn"

            server.ehlo()
            server.starttls()
            server.ehlo()
            server.login("friendscornermanagement@gmail.com", email_password)
            company = "Friends Corner"
            body = f"Dear {firstName},\n\nWe have received a request to reset " \
                   f"the password for your account. To proceed with this request, use the following verification " \
                   f"code:\n\n{otp}\n\nPlease enter this code on the password reset page to confirm your identity and continue" \
                   f" with the password reset process.\nIf you did not make this request, please disregard this email and " \
                   f"ensure that your account is secure. Thank you for using our service.\n\nBest regards,\n" \
                   f"{company}."

            subject = "RESET YOUR FRIENDSCORNER PASSWORD."

            message = f'subject: {subject} \n\n{body}'

            server.sendmail(
                    "Friends Corner",
                    send_email_address,
                    message)

    def button_continue(self):
            self.reset_password_step = 1
            self.resetpass_send_email_address = self.led_pageForgotPassword_Username.text()
            try:
                    self.mycursor.execute(f"SELECT EXISTS(SELECT * FROM apartment_name.tenants_logins "
                                          f"WHERE email_address = '{self.resetpass_send_email_address}');")
                    exists = str(self.mycursor.fetchall()[0][0])
                    if exists == "1":
                            self.lbl_pageForgotPassword_emailNotification.setText(
                                    "Verification code has been sent to your email")
                            self.lbl_pageForgotPassword_emailNotification.setStyleSheet("color: rgb(56, 255, 12);"
                                                                                        "background-color: rgb(61, 61, 61);")

                            try:
                                    self.led_pageForgotPassword_Username.setStyleSheet(
                                            "background-color: rgb(61, 61, 61);"
                                            "color: rgb(255, 255, 255);"
                                            "border: 2px solid rgb(100, 197, 26);"
                                            "border-radius:5px;")
                                    self.verification_code = self.get_otp()
                                    self.mycursor.execute(f"SELECT first_name FROM apartment_name.details "
                                                          f"WHERE email_address = '{self.resetpass_send_email_address}';")
                                    self.resetpass_first_name = str(self.mycursor.fetchall()[0][0])
                                    self.sendmail(self.resetpass_send_email_address, self.resetpass_first_name,
                                                  self.verification_code)
                                    self.btn_pageForgotPassword_continue.hide()
                                    self.lbl_pageForgotPassword_verificationcode.show()
                                    self.led_pageForgotPassword_verificationCode.show()
                                    self.btn_pageForgotPassword_verifyCode.show()
                                    self.lbl_pageForgotPassword_verificationcode.setText("Enter Verification Code")
                            except:
                                    self.lbl_pageForgotPassword_emailNotification.setText(
                                            "There was an error sending verification code."
                                            "Please check your internet.")

                                    self.lbl_pageForgotPassword_emailNotification.setStyleSheet(
                                            "color: rgb(255, 44, 7);"
                                            "background-color: rgb(61, 61, 61);")

                    else:
                            self.lbl_pageForgotPassword_emailNotification.setText(
                                    "Email address is not linked to any account")
                            self.lbl_pageForgotPassword_emailNotification.setStyleSheet("color: rgb(255, 44, 7);"
                                                                                        "background-color: rgb(61, 61, 61);")

            except:
                    self.lbl_pageForgotPassword_emailNotification.setText(
                            "An error occurred! Please restart the application")
                    self.lbl_pageForgotPassword_emailNotification.setStyleSheet("color: rgb(255, 44, 7);"
                                                                                "background-color: rgb(61, 61, 61);")

    def button_verifyCode(self):
            self.reset_password_step = 2
            user_code = self.led_pageForgotPassword_verificationCode.text()

            if user_code == self.verification_code:
                    self.led_pageForgotPassword_verificationCode.hide()
                    self.led_pageForgotPassword_Username.hide()
                    self.btn_pageForgotPassword_verifyCode.hide()

                    self.led_pageForgotPassword_newpassword.show()
                    self.led_pageForgotPassword_confirmPassword.show()
                    self.btn_pageForgotPassword_updatePassword.show()

                    self.lbl_pageForgotPassword_verificationNotification.setText("")
                    self.lbl_pageForgotPassword_emailNotification.setText("")
                    self.lbl_pageForgotPassword_email.setText("New password")
                    self.lbl_pageForgotPassword_verificationcode.setText("Repeat Password")

            else:
                    self.lbl_pageForgotPassword_verificationNotification.setText("Incorrect code!")

    def button_pageForgotPassword_BacktoLogin(self):
            try:
                    if self.reset_password_step == 0:
                            self.to_pageLogin()
                    elif self.reset_password_step == 1 or self.lbl_pageForgotPassword_verificationcode.text() == "Incorrect code!":
                            self.led_pageForgotPassword_Username.show()
                            self.lbl_pageForgotPassword_email.setText("Enter your Email Address")
                            self.lbl_pageForgotPassword_emailNotification.setText("")
                            self.led_pageForgotPassword_Username.clear()
                            self.btn_pageForgotPassword_continue.show()
                            self.stackedWidget.setCurrentWidget(self.PageLogin)
                            self.lbl_pageForgotPassword_verificationcode.hide()
                            self.btn_pageForgotPassword_verifyCode.hide()

                            self.led_pageForgotPassword_verificationCode.hide()

                            self.led_pageForgotPassword_Username.show()
                            self.lbl_pageForgotPassword_email.setText("Enter your Email Address")
                            self.lbl_pageForgotPassword_emailNotification.setText("")
                            self.led_pageForgotPassword_Username.clear()
                            self.btn_pageForgotPassword_continue.show()
                            self.stackedWidget.setCurrentWidget(self.PageLogin)

                    elif self.reset_password_step == 2:
                            self.lbl_pageForgotPassword_verificationcode.hide()
                            self.btn_pageForgotPassword_updatePassword.hide()
                            self.led_pageForgotPassword_newpassword.hide()
                            self.led_pageForgotPassword_confirmPassword.hide()

                            self.led_pageForgotPassword_Username.show()
                            self.lbl_pageForgotPassword_email.setText("Enter your Email Address")
                            self.lbl_pageForgotPassword_emailNotification.setText("")
                            self.lbl_pageForgotPassword_verificationNotification.setText("")

                            self.led_pageForgotPassword_Username.clear()
                            self.btn_pageForgotPassword_continue.show()
                            self.stackedWidget.setCurrentWidget(self.PageLogin)

            except:
                    self.led_pageForgotPassword_confirmPassword.hide()
                    self.led_pageForgotPassword_confirmPassword.hide()
                    self.lbl_pageForgotPassword_verificationcode.setText("")
                    self.led_pageForgotPassword_Username.show()
                    self.lbl_pageForgotPassword_email.setText("Enter your Email Address")
                    self.led_pageForgotPassword_Username.clear()
                    self.lbl_resetPassword_usernameNotiication.setText("")
                    self.btn_pageForgotPassword_continue.show()
                    self.stackedWidget.setCurrentWidget(self.PageLogin)

    def goodpass(self):
            if len(self.led_pageForgotPassword_newpassword.text()) >= 8:
                    self.led_pageForgotPassword_newpassword.setStyleSheet("background-color: rgb(61, 61, 61);"
                                                                          "color: rgb(255, 255, 255);"
                                                                          "border: 2px solid rgb(100, 197, 26);"
                                                                          "border-radius:5px;")
                    self.lbl_pageForgotPassword_emailNotification.setText("Strong Password")
                    self.lbl_pageForgotPassword_emailNotification.setStyleSheet("color: rgb(100, 197, 26);"
                                                                                "background-color: rgb(61, 61, 61);")
            else:
                    self.led_pageForgotPassword_newpassword.setStyleSheet("background-color: rgb(61, 61, 61);"
                                                                          "color: rgb(255, 255, 255);"
                                                                          "border: 2px solid red;"
                                                                          "border-radius:5px;")

                    self.lbl_pageForgotPassword_emailNotification.setText(
                            "Password length should be greater than 8 characters")
                    self.lbl_pageForgotPassword_emailNotification.setStyleSheet("color: rgb(255, 44, 7);"
                                                                                "background-color: rgb(61, 61, 61);")

    def button_forgotpassword_updatepassword(self):
            new_password = self.led_pageForgotPassword_newpassword.text()
            confirm_password = self.led_pageForgotPassword_confirmPassword.text()

            if len(new_password) >= 8:
                    self.led_pageForgotPassword_newpassword.setStyleSheet("background-color: rgb(61, 61, 61);"
                                                                          "color: rgb(255, 255, 255);"
                                                                          "border: 2px solid rgb(100, 197, 26);"
                                                                          "border-radius:5px;")
                    if new_password == confirm_password:
                            print(self.resetpass_send_email_address)
                            self.mycursor.execute(f"SELECT id_number FROM apartment_name.tenants_logins "
                                                  f"WHERE email_address = '{self.resetpass_send_email_address}';")

                            primary_key = str(self.mycursor.fetchall()[0][0])
                            print(f"Done here: {primary_key}")

                            self.mycursor.execute(
                                    f"UPDATE apartment_name.tenants_logins SET user_password = '{new_password}' "
                                    f"WHERE id_number = '{primary_key}';")
                            self.db.commit()

                            server = smtplib.SMTP('smtp.gmail.com', 587)
                            email_password = "opmawjgeglznvoyn"

                            server.ehlo()
                            server.starttls()
                            server.ehlo()
                            server.login("friendscornermanagement@gmail.com", email_password)
                            company = "Friends Corner"

                            body = f"Dear {self.resetpass_first_name} \n\nThis email is to confirm that the password for your " \
                                   f"account has been successfully" \
                                   f" changed. If you did not make this change, please contact our support team immediately. \n\nIf " \
                                   f"you did make this change, please keep your new password secure and do not share it with anyone." \
                                   f" We recommend that you choose a strong, unique password that is not easy to guess and update it" \
                                   f" regularly to ensure the security of your account. \n\nIf you experience any issues logging in " \
                                   f"with your new password, please contact our support team for assistance. Thank you for using " \
                                   f"our service. \n\nBest regards,\n{company}"

                            subject = "FRIENDSCORNER'S PASSWORD CHANGE."

                            message = f'subject: {subject} \n\n{body}'

                            server.sendmail(
                                    "Friends Corner",
                                    self.resetpass_send_email_address,
                                    message)

                            self.stackedWidget.setCurrentWidget(self.PageLogin)
                            self.lbl_pageForgotPassword_verificationNotification.setText(
                                    "Password changed successfully!")

                            self.lbl_pageForgotPassword_verificationcode.hide()
                            self.btn_pageForgotPassword_updatePassword.hide()
                            self.led_pageForgotPassword_newpassword.hide()
                            self.led_pageForgotPassword_confirmPassword.hide()

                            self.led_pageForgotPassword_Username.show()
                            self.lbl_pageForgotPassword_email.setText("Enter your Email Address")
                            self.lbl_pageForgotPassword_emailNotification.setText("")
                            self.lbl_pageForgotPassword_verificationNotification.setText("")

                            self.led_pageForgotPassword_Username.clear()
                            self.btn_pageForgotPassword_continue.show()

                            self.stackedWidget.setCurrentWidget(self.PageLogin)

                    else:
                            self.lbl_pageForgotPassword_verificationNotification.setText("Passwords do not match!")
            else:
                    self.lbl_pageForgotPassword_emailNotification.setText("Password length should be greater than 8")

    def next_signup_page(self):
            self.signUP.setCurrentWidget(self.pageNextOfKin)
            self.lbl_pageSignUp_nextofkin.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                        "border: 2px solid rgb(59, 59, 59);"
                                                        "border-left:6px solid rgb(255, 6, 18);")
            self.lbl_pageSignUp_personalDetails.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                              "border: 2px solid rgb(59, 59, 59);"
                                                              "border-radius:5px")

    def btn_pageSignup_pageNexofKin_next_clicked(self):
            if (self.edited_NOK_FirstName_signup is True) and \
                    (self.edited_NOK_LastName_signup is True) and (self.edited_NOK_phoneNumber_signup is True):
                    self.signUP.setCurrentWidget(self.pagePassword)
                    self.lbl_pageSignUp_password.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                               "border: 2px solid rgb(59, 59, 59);"
                                                               "border-left:6px solid rgb(255, 6, 18);")
                    self.lbl_pageSignUp_nextofkin.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                                "border: 2px solid rgb(59, 59, 59);"
                                                                "border-radius:5px")

                    self.lbl_pageSignup_Fillall_NOK_Notification.setText("")

            else:
                    warning = QMessageBox()
                    warning.setWindowTitle("WARNING")
                    warning.setIcon(QMessageBox.Critical)
                    warning.setText("Enter all required fields with *")
                    x = warning.exec_()
                    self.lbl_pageSignup_Fillall_NOK_Notification.setText("Enter all required fields with *")

            self.signup_relationsip_NOK = self.combo_pageSignup_next_of_kin_relationship.currentText()
            self.signup_address_NOK = self.led_pageSignup_next_of_kinAddress.text()
            if self.signup_address_NOK == "":
                    self.signup_address_NOK = "NOT STATED"

    def btn_pageSignup_pagePassword_back_clicked(self):
            self.signUP.setCurrentWidget(self.pageNextOfKin)
            self.lbl_pageSignUp_nextofkin.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                        "border: 2px solid rgb(59, 59, 59);"
                                                        "border-left:6px solid rgb(255, 6, 18);")
            self.lbl_pageSignUp_password.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                       "border: 2px solid rgb(59, 59, 59);"
                                                       "border-radius:5px")

    def btn_pageSignup_page_NextofKin_back_clicked(self):
            self.signUP.setCurrentWidget(self.pageSignUpPersonalDetails)
            self.lbl_pageSignUp_personalDetails.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                              "border: 2px solid rgb(59, 59, 59);"
                                                              "border-left:6px solid rgb(255, 6, 18);")
            self.lbl_pageSignUp_nextofkin.setStyleSheet("background-color: rgb(203, 203, 203);"
                                                        "border: 2px solid rgb(59, 59, 59);"
                                                        "border-radius:5px")

    def btn_pageHomepage_chat_clicked(self):
            self.stackedWidget_2.setCurrentWidget(self.pageChat)

    def update_manager_messages_textedit(self, display_message):
            self.current_manager_display_message = display_message

            if self.previous_manager_display_message != self.current_manager_display_message:
                    self.ted_pageChat_chatbox_manager.setPlainText(display_message)
                    cursor = self.ted_pageChat_chatbox_manager.textCursor()
                    cursor.movePosition(QTextCursor.End, QTextCursor.MoveAnchor)
                    self.ted_pageChat_chatbox_manager.setTextCursor(cursor)
                    self.ted_pageChat_chatbox_manager.setReadOnly(True)

                    self.previous_manager_display_message = self.current_manager_display_message
            else:
                    i = 0

    def update_owner_messages_textedit(self, display_message):
            self.current_owner_display_message = display_message
            if self.previous_owner_display_message != self.current_owner_display_message:
                    self.ted_pageChat_chatbox_owner.setPlainText(display_message)
                    cursor = self.ted_pageChat_chatbox_owner.textCursor()
                    cursor.movePosition(QTextCursor.End, QTextCursor.MoveAnchor)
                    self.ted_pageChat_chatbox_owner.setTextCursor(cursor)
                    self.ted_pageChat_chatbox_owner.setReadOnly(True)
                    self.previous_owner_display_message = self.current_owner_display_message
            else:
                    i = 0

    def btn_pageHomepage_reportacomplaint_clicked(self):
            self.stackedWidget_2.setCurrentWidget(self.pageReport_a_complaint)

    def btn_pageReportAComplaint_backToHomepage_clicked(self):
            self.stackedWidget_2.setCurrentWidget(self.pageRealHomepage)

import resources_rc
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QTextCursor, QPixmap
from PyQt5.QtWidgets import QMessageBox, QFileDialog
from PyQt5.QtCore import QThread, pyqtSignal
import mysql.connector
import random
import smtplib
from datetime import datetime
import re
import time as sleeptime

class ManagerMessageThread(QThread):
    messages_updated = pyqtSignal(str)

    def __init__(self, session_user_firstName):
            super().__init__()
            self.db = mysql.connector.connect(
                    host="localhost",
                    user="root",
                    password="root"
            )
            self.mycursor = self.db.cursor()
            self.session_user_firstName = session_user_firstName

    def run(self):
            v = True
            while v is True:
                    self.db = mysql.connector.connect(
                            host="localhost",
                            user="root",
                            password="root"
                    )
                    self.mycursor = self.db.cursor()

                    self.mycursor.execute(f"SELECT * FROM (SELECT * FROM apartment_name.messages "
                                          f"WHERE sent_from = 'MANAGER' or sent_to = 'MANAGER' ORDER BY date_sent) AS table_owner "
                                          f"WHERE table_owner.sent_from = '{self.session_user_firstName}' or "
                                          f"table_owner.sent_to = '{self.session_user_firstName}' ORDER BY date_sent;")
                    messagelist = [i for i in self.mycursor]

                    if len(messagelist) > 0:
                            display_message = ''

                            for i in messagelist:
                                    time = f"[{i[1]}] "
                                    if i[2] == self.session_user_firstName:
                                            message = time + "YOU: "
                                    else:
                                            message = time + i[2].upper() + ": "

                                    message += f"{i[4]}\n\n"

                                    display_message += message
                    else:
                            display_message = "\n\n                                                                         " \
                                              "           " \
                                              "START CHAT WITH HOUSE MANAGER"

                    self.messages_updated.emit(display_message)
                    self.db.close()

                    sleeptime.sleep(2)



class OwnerMessageThread(QThread):
    messages_updated = pyqtSignal(str)

    def __init__(self, session_user_firstName):
            super().__init__()
            self.db = mysql.connector.connect(
                    host="localhost",
                    user="root",
                    password="root"
            )
            self.mycursor = self.db.cursor()
            self.session_user_firstName = session_user_firstName

    def run(self):
            v = True
            while v is True:
                    self.db = mysql.connector.connect(
                            host="localhost",
                            user="root",
                            password="root"
                    )
                    self.mycursor = self.db.cursor()

                    self.mycursor.execute(f"SELECT * FROM (SELECT * FROM apartment_name.messages "
                                          f"WHERE sent_from = 'OWNER' or sent_to = 'OWNER' ORDER BY date_sent) AS table_owner "
                                          f"WHERE table_owner.sent_from = '{self.session_user_firstName}' or "
                                          f"table_owner.sent_to = '{self.session_user_firstName}' ORDER BY date_sent;")
                    messagelist = [i for i in self.mycursor]

                    if len(messagelist) > 0:
                            display_message = ''

                            for i in messagelist:
                                    time = f"[{i[1]}] "
                                    if i[2] == self.session_user_firstName:
                                            message = time + "YOU: "
                                    else:
                                            message = time + i[2].upper() + ": "

                                    message += f"{i[4]}\n\n"

                                    display_message += message
                    else:
                            display_message = "\n\n                                                                         " \
                                              "           " \
                                              "START CHAT WITH OWNER"

                    self.messages_updated.emit(display_message)
                    self.db.close()

                    sleeptime.sleep(2)

    def getmessages(self):
            self.mycursor.execute(f"SELECT * FROM (SELECT * FROM apartment_name.messages "
                                  f"WHERE sent_from = 'OWNER' or sent_to = 'OWNER' ORDER BY date_sent) AS table_owner "
                                  f"WHERE table_owner.sent_from = '{self.session_user_firstName}' or "
                                  f"table_owner.sent_to = '{self.session_user_firstName}' ORDER BY date_sent;")
            messagelist = [i for i in self.mycursor]

            if len(messagelist) > 0:
                    display_message = ''

            for i in messagelist:
                    time = f"[{i[1]}] "
                    if i[2] == self.session_user_firstName:
                            message = time + "YOU: "
                    else:
                            message = time + i[2].upper() + ": "

                            message += f"{i[4]}\n\n"

                            display_message += message
            else:
                    display_message = "\n\n                                                                         " \
                                      "           " \
                                      "START CHAT WITH OWNER"

            return display_message


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
